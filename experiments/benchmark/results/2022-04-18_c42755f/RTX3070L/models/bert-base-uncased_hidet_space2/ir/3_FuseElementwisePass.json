{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "int64[1, 128]",
                "shape": {
                  "dimensions": [
                    1,
                    128
                  ]
                },
                "dataType": "int64"
              }
            }
          ],
          "visible": true
        },
        {
          "name": "input:1",
          "arguments": [
            {
              "name": "input:1",
              "type": {
                "string": "int64[1, 128]",
                "shape": {
                  "dimensions": [
                    1,
                    128
                  ]
                },
                "dataType": "int64"
              }
            }
          ],
          "visible": true
        },
        {
          "name": "input:2",
          "arguments": [
            {
              "name": "input:2",
              "type": {
                "string": "int64[1, 128]",
                "shape": {
                  "dimensions": [
                    1,
                    128
                  ]
                },
                "dataType": "int64"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "FusedDivideMultiplyAdd25:0",
              "type": {
                "string": "float32[1, 128, 768]",
                "shape": {
                  "dimensions": [
                    1,
                    128,
                    768
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        },
        {
          "name": "output:1",
          "arguments": [
            {
              "name": "FusedAddTanh1:0",
              "type": {
                "string": "float32[1, 768]",
                "shape": {
                  "dimensions": [
                    1,
                    768
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "Take1",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32[30522, 768]",
                    "shape": {
                      "dimensions": [
                        30522,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "int64[1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        128
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Take1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  compute: TensorCompute(output, shape=(1, 128, 768), axes=(v, v_1, v_2), value=data[indices[v, v_1], v_2])",
            "  params: data: TensorType(ScalarType(float32), [30522, 768], global, RowMajorLayout), indices: TensorType(ScalarType(int64), [1, 128], host, RowMajorLayout), output: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Take2",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32[2, 768]",
                    "shape": {
                      "dimensions": [
                        2,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "input:2",
                  "type": {
                    "string": "int64[1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        128
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Take2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  compute: TensorCompute(output, shape=(1, 128, 768), axes=(v, v_1, v_2), value=data[indices[v, v_1], v_2])",
            "  params: data: TensorType(ScalarType(float32), [2, 768], global, RowMajorLayout), indices: TensorType(ScalarType(int64), [1, 128], global, RowMajorLayout), output: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddAdd1",
          "type": {
            "name": "FusedAddAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Take1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Take2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] + y[0, v_1, v_2]) + y_1[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean1",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean1:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub1",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean1:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow1",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt1",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt1:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd1",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt1:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:5",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:6",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul1",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:7",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten1",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:8",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten1:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul2",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:9",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten2",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:10",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten2:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul3",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten1:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten2:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul3:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide1",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul3:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:11",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1",
          "type": {
            "name": "FusedUnsqueezeUnsqueezeCastSubMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:1",
                  "type": {
                    "string": "int64[1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        128
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:12",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:13",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "-10000.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "dtype",
              "type": "str",
              "value": "float32",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange_rearrange_cast_sub_mul",
            "  compute: TensorCompute(z, shape=(1, 1, 1, 128), axes=(v, v_1, v_2, v_3), value=((x[] - cast(ScalarType(float32), x_1[((((0 / 1) % 1) / 1) % 1), ((((v_3 / 1) % 128) / 1) % 128)])) * y[]))",
            "  params: x: TensorType(ScalarType(int64), [1, 128], global, RowMajorLayout), x: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add1",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax1",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten1",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax1:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten1:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul4",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:14",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten3",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:15",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten3:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul5",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten1:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten3:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul5:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape1",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul5:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul6",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:16",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add2",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:17",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add3",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean2",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean2:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub2",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean2:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow2",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:18",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt2",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:19",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt2:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd2",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt2:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:20",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:21",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul7",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:22",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add4",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:23",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd1",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:24",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:25",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply1",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd1:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:26",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply1:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul8",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply1:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:27",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add5",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:28",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add6",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean3",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean3:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub3",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean3:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow3",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:29",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt3",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:30",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt3:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd3",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt3:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:31",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:32",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul9",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:33",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten4",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:34",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten4:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul10",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:35",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten5",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:36",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten5:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul11",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten4:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten5:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul11:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide2",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul11:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:37",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide2:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add7",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide2:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax2",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax2:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten2",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax2:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten2:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul12",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:38",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten6",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:39",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten6:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul13",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten2:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten6:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul13:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape2",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul13:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul14",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape2:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:40",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add8",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:41",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add9",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean4",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean4:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub4",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean4:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow4",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:42",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt4",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:43",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt4:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd4",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt4:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:44",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:45",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul15",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:46",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul15:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add10",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul15:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:47",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd2",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:48",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:49",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd2:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply2",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd2:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:50",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply2:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul16",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply2:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:51",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add11",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:52",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add12",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean5",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean5:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub5",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean5:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow5",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:53",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt5",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:54",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt5:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd5",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt5:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:55",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:56",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul17",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:57",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten7",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:58",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten7:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul18",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:59",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten8",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:60",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten8:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul19",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten7:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten8:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul19:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide3",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul19:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:61",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide3:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add13",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide3:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add13:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax3",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add13:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax3:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten3",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax3:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten3:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul20",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:62",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten9",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:63",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten9:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul21",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten3:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten9:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul21:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape3",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul21:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul22",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape3:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:64",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add14",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:65",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add15",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean6",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean6:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub6",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean6:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow6",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:66",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt6",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:67",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt6:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd6",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt6:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:68",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:69",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul23",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:70",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul23:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add16",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul23:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:71",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add16:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd3",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add16:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:72",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:73",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply3",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add16:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd3:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:74",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply3:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul24",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply3:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:75",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add17",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:76",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add18",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean7",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean7:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub7",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean7:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow7",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:77",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt7",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:78",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt7:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd7",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt7:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:79",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:80",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul25",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:81",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten10",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:82",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten10:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul26",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:83",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul26:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten11",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul26:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:84",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten11:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul27",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten10:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten11:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul27:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide4",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul27:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:85",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide4:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add19",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide4:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add19:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax4",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add19:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax4:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten4",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax4:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten4:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul28",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:86",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul28:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten12",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul28:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:87",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten12:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul29",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten4:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten12:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul29:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape4",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul29:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul30",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape4:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:88",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul30:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add20",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul30:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:89",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add21",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean8",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean8:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub8",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean8:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow8",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:90",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt8",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:91",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt8:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd8",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt8:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:92",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:93",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul31",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:94",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul31:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add22",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul31:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:95",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add22:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd4",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add22:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:96",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:97",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply4",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add22:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:98",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul32",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply4:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:99",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul32:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add23",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul32:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:100",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add24",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean9",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean9:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub9",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean9:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow9",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:101",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt9",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:102",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt9:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd9",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt9:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:103",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:104",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul33",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:105",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul33:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten13",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul33:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:106",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten13:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul34",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:107",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul34:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten14",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul34:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:108",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten14:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul35",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten13:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten14:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul35:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide5",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul35:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:109",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide5:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add25",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide5:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add25:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax5",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add25:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax5:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten5",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax5:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten5:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul36",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:110",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul36:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten15",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul36:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:111",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten15:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul37",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten5:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten15:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul37:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape5",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul37:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul38",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape5:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:112",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul38:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add26",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul38:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:113",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add26:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add27",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add26:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add27:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean10",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add27:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean10:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub10",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add27:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean10:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow10",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:114",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt10",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:115",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt10:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd10",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt10:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:116",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:117",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul39",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:118",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul39:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add28",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul39:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:119",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add28:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd5",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add28:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:120",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:121",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply5",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add28:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd5:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:122",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply5:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul40",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply5:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:123",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul40:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add29",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul40:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:124",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add29:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add30",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add29:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add30:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean11",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add30:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean11:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub11",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add30:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean11:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow11",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:125",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt11",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:126",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt11:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd11",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt11:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:127",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:128",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul41",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:129",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul41:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten16",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul41:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:130",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten16:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul42",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:131",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul42:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten17",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul42:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:132",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten17:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul43",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten16:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten17:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul43:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide6",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul43:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:133",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide6:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add31",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide6:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add31:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax6",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add31:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax6:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten6",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax6:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten6:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul44",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:134",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul44:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten18",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul44:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:135",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten18:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul45",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten6:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten18:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul45:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape6",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul45:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul46",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape6:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:136",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul46:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add32",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul46:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:137",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add32:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add33",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add32:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add33:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean12",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add33:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean12:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub12",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add33:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean12:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow12",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:138",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt12",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:139",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt12:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd12",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt12:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:140",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:141",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul47",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:142",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul47:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add34",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul47:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:143",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add34:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd6",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add34:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:144",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:145",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd6:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply6",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add34:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd6:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:146",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply6:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul48",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply6:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:147",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul48:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add35",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul48:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:148",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add35:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add36",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add35:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add36:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean13",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add36:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean13:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub13",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add36:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean13:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow13",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:149",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt13",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:150",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt13:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd13",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt13:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:151",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:152",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul49",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:153",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul49:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten19",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul49:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:154",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten19:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul50",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:155",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul50:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten20",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul50:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:156",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten20:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul51",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten19:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten20:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul51:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide7",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul51:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:157",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add37",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add37:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax7",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add37:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten7",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax7:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten7:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul52",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:158",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul52:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten21",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul52:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:159",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten21:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul53",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten7:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten21:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul53:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape7",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul53:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul54",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape7:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:160",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul54:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add38",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul54:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:161",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add38:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add39",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add38:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd13:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add39:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean14",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add39:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean14:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub14",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add39:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean14:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow14",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:162",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt14",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:163",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt14:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd14",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt14:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:164",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:165",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul55",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:166",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul55:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add40",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul55:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:167",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add40:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd7",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add40:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:168",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:169",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply7",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add40:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:170",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul56",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply7:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:171",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul56:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add41",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul56:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:172",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add41:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add42",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add41:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd14:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add42:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean15",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add42:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean15:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub15",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add42:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean15:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow15",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:173",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt15",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:174",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt15:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd15",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt15:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:175",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:176",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul57",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:177",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul57:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten22",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul57:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:178",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten22:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul58",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:179",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul58:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten23",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul58:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:180",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten23:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul59",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten22:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten23:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul59:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide8",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul59:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:181",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide8:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add43",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide8:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add43:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax8",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add43:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax8:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten8",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax8:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten8:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul60",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:182",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul60:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten24",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul60:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:183",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten24:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul61",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten8:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten24:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul61:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape8",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul61:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul62",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape8:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:184",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul62:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add44",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul62:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:185",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add44:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add45",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add44:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd15:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add45:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean16",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add45:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean16:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub16",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add45:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean16:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow16",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:186",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt16",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:187",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt16:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd16",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt16:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:188",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:189",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul63",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:190",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul63:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add46",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul63:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:191",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add46:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd8",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add46:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:192",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:193",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd8:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply8",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add46:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd8:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:194",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply8:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul64",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply8:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:195",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul64:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add47",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul64:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:196",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add47:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add48",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add47:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd16:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add48:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean17",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add48:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean17:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub17",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add48:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean17:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow17",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:197",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt17",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:198",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt17:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd17",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt17:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:199",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:200",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul65",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:201",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul65:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten25",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul65:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:202",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten25:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul66",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:203",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul66:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten26",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul66:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:204",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten26:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul67",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten25:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten26:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul67:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide9",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul67:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:205",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide9:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add49",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide9:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add49:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax9",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add49:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax9:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten9",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax9:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten9:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul68",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:206",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul68:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten27",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul68:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:207",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten27:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul69",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten9:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten27:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul69:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape9",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul69:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul70",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape9:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:208",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul70:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add50",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul70:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:209",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add50:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add51",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add50:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd17:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add51:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean18",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add51:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean18:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub18",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add51:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean18:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow18",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:210",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt18",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:211",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt18:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd18",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt18:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:212",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:213",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul71",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:214",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul71:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add52",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul71:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:215",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add52:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd9",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add52:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:216",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:217",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply9",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add52:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd9:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:218",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply9:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul72",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply9:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:219",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul72:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add53",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul72:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:220",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add53:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add54",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add53:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd18:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add54:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean19",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add54:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean19:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub19",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add54:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean19:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow19",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:221",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt19",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:222",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt19:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd19",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt19:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:223",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:224",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul73",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:225",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul73:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten28",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul73:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:226",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten28:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul74",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:227",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul74:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten29",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul74:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:228",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten29:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul75",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten28:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten29:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul75:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide10",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul75:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:229",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide10:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add55",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide10:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add55:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax10",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add55:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax10:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten10",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax10:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten10:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul76",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:230",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul76:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten30",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul76:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:231",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten30:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul77",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten10:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten30:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul77:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape10",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul77:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul78",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape10:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:232",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul78:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add56",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul78:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:233",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add56:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add57",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add56:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd19:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add57:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean20",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add57:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean20:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub20",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add57:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean20:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow20",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:234",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt20",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:235",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt20:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd20",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt20:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:236",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:237",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul79",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:238",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul79:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add58",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul79:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:239",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add58:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd10",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add58:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:240",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:241",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply10",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add58:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:242",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul80",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply10:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:243",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul80:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add59",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul80:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:244",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add59:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add60",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add59:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd20:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add60:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean21",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add60:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean21:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub21",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add60:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean21:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow21",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:245",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt21",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:246",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt21:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd21",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt21:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:247",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:248",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul81",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:249",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul81:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten31",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul81:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:250",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten31:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul82",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:251",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul82:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten32",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul82:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:252",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten32:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul83",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten31:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten32:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul83:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide11",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul83:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:253",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide11:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add61",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide11:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add61:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax11",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add61:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax11:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten11",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax11:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten11:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul84",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:254",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul84:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten33",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul84:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:255",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten33:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul85",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten11:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten33:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul85:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape11",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul85:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul86",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape11:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:256",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul86:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add62",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul86:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:257",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add62:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add63",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add62:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd21:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add63:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean22",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add63:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean22:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub22",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add63:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean22:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow22",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:258",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt22",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:259",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt22:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd22",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt22:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:260",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:261",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul87",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:262",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul87:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add64",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul87:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:263",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add64:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd11",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add64:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:264",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:265",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply11",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add64:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd11:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:266",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply11:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul88",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply11:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:267",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul88:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add65",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul88:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:268",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add65:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add66",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add65:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd22:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add66:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean23",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add66:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean23:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub23",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add66:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean23:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow23",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:269",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt23",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:270",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt23:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd23",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt23:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:271",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:272",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul89",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:273",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul89:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten34",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul89:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:274",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten34:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul90",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:275",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul90:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten35",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul90:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:276",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten35:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 3, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 64, 128), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_2 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_1 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul91",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten34:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten35:0",
                  "type": {
                    "string": "float32[12, 64, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        64,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul91:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 128), axes=(v, v_1, v_2), value=ReduceCompute(shape=(64), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 64, 128], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeDivide12",
          "type": {
            "name": "FusedReshapeDivide",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul91:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:277",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "8.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide12:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 12, 128, 128]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_div",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 16384) % 12), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 128) % 128), ((((((0 + (0 * 196608)) + (v_1 * 16384)) + (v_2 * 128)) + (v_3 * 1)) / 1) % 128)] / y[]))",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add67",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeDivide12:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedUnsqueezeUnsqueezeCastSubMultiply1:0",
                  "type": {
                    "string": "float32[1, 1, 1, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add67:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 12, 128, 128), axes=(v, v_1, v_2, v_3), value=(x[0, v_1, v_2, v_3] + y[0, 0, 0, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1, 1, 128], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Softmax12",
          "type": {
            "name": "Softmax",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add67:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax12:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: softmax",
            "  compute: CustomCompute(name=out, identifier=softmax, data_type=TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), params=[x], attributes={axis: 3})",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Flatten12",
          "type": {
            "name": "Flatten",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Softmax12:0",
                  "type": {
                    "string": "float32[1, 12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten12:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 128), axes=(v, v_1, v_2), value=x[((v / 12) % 1), ((v / 1) % 12), ((v_1 / 1) % 128), ((v_2 / 1) % 128)])",
            "  params: x: TensorType(ScalarType(float32), [1, 12, 128, 128], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul92",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:278",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul92:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddReshapeTransposeFlatten36",
          "type": {
            "name": "FusedAddReshapeTransposeFlatten",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul92:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:279",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten36:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 12, 64]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "start_dim",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            },
            {
              "name": "end_dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: add_reshape_rearrange_rearrange",
            "  compute: TensorCompute(y, shape=(12, 128, 64), axes=(v, v_1, v_2), value=(x[0, ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 768) % 128), ((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)] + y[((((((0 + (((((v / 12) % 1) / 1) % 1) * 98304)) + (((((v_1 / 1) % 128) / 1) % 128) * 768)) + (((((v / 1) % 12) / 1) % 12) * 64)) + (((((v_2 / 1) % 64) / 1) % 64) * 1)) / 1) % 768)]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul93",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Flatten12:0",
                  "type": {
                    "string": "float32[12, 128, 128]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddReshapeTransposeFlatten36:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul93:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(12, 128, 64), axes=(v, v_1, v_2), value=ReduceCompute(shape=(128), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [12, 128, 128], global, RowMajorLayout), B: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), C: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReshapeTransposeReshape12",
          "type": {
            "name": "FusedReshapeTransposeReshape",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul93:0",
                  "type": {
                    "string": "float32[12, 128, 64]",
                    "shape": {
                      "dimensions": [
                        12,
                        128,
                        64
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 768]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 2, 1, 3]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_reshape",
            "  compute: TensorCompute(y, shape=(1, 128, 768), axes=(v, v_1, v_2), value=x[((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 8192) % 12), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 64) % 128), ((((((0 + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 98304) % 1) / 1) % 1) * 98304)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 64) % 12) / 1) % 12) * 8192)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 768) % 128) / 1) % 128) * 64)) + ((((((((0 + (v * 98304)) + (v_1 * 768)) + (v_2 * 1)) / 1) % 64) / 1) % 64) * 1)) / 1) % 64)])",
            "  params: x: TensorType(ScalarType(float32), [12, 128, 64], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul94",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReshapeTransposeReshape12:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:280",
                  "type": {
                    "string": "float32[1, 768, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul94:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add68",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul94:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:281",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add68:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add69",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add68:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd23:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add69:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean24",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add69:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean24:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub24",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add69:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean24:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow24",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:282",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt24",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:283",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt24:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd24",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt24:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:284",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:285",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul95",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:286",
                  "type": {
                    "string": "float32[1, 768, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        768,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul95:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 768, 3072], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add70",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul95:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:287",
                  "type": {
                    "string": "float32[3072]",
                    "shape": {
                      "dimensions": [
                        3072
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add70:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [3072], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideErfAdd12",
          "type": {
            "name": "FusedDivideErfAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add70:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:288",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.4142135"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:289",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd12:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_erf_add",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=(erff((x[0, v_1, v_2] / y[])) + y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedMultiplyMultiply12",
          "type": {
            "name": "FusedMultiplyMultiply",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add70:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideErfAdd12:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:290",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0.5"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply12:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul_mul",
            "  compute: TensorCompute(z, shape=(1, 128, 3072), axes=(v, v_1, v_2), value=((x[0, v_1, v_2] * y[0, v_1, v_2]) * y_1[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "BatchedMatmul96",
          "type": {
            "name": "BatchedMatmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedMultiplyMultiply12:0",
                  "type": {
                    "string": "float32[1, 128, 3072]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        3072
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:291",
                  "type": {
                    "string": "float32[1, 3072, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        3072,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul96:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: batched_matmul",
            "  compute: TensorCompute(C, shape=(1, 128, 768), axes=(v, v_1, v_2), value=ReduceCompute(shape=(3072), axes=(v_3), value=(A[v, v_1, v_3] * B[v, v_3, v_2])))",
            "  params: A: TensorType(ScalarType(float32), [1, 128, 3072], global, RowMajorLayout), B: TensorType(ScalarType(float32), [1, 3072, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add71",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "BatchedMatmul96:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:292",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add71:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add72",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add71:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd24:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add72:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] + y[0, v_1, v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "ReduceMean25",
          "type": {
            "name": "ReduceMean",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add72:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceMean25:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=ReduceCompute(shape=(768), axes=(v_3), value=x[v, v_1, v_3]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Sub25",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add72:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceMean25:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(x[0, v_1, v_2] - y[0, v_1, 0]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Pow25",
          "type": {
            "name": "Pow",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:293",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "2.0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: pow",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=powf(x[0, v_1, v_2], y[]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedReduceMeanAddSqrt25",
          "type": {
            "name": "FusedReduceMeanAddSqrt",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pow25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:294",
                  "type": {
                    "string": "float32[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "1e-12"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt25:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_mean_add_sqrt",
            "  compute: TensorCompute(y, shape=(1, 128, 1), axes=(v, v_1, v_2), value=sqrtf((ReduceCompute(shape=(768), axes=(v_3), value=x[0, v_1, v_3]) + y[])))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedDivideMultiplyAdd25",
          "type": {
            "name": "FusedDivideMultiplyAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedReduceMeanAddSqrt25:0",
                  "type": {
                    "string": "float32[1, 128, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:295",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "const:296",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: div_mul_add",
            "  compute: TensorCompute(z, shape=(1, 128, 768), axes=(v, v_1, v_2), value=(((x[0, v_1, v_2] / y[0, v_1, 0]) * y_1[v_2]) + y_2[v_2]))",
            "  params: x: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Take3",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedDivideMultiplyAdd25:0",
                  "type": {
                    "string": "float32[1, 128, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:297",
                  "type": {
                    "string": "int64[]",
                    "shape": {
                      "dimensions": []
                    },
                    "dataType": "int64"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "0"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Take3:0",
                  "type": {
                    "string": "float32[1, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  compute: TensorCompute(output, shape=(1, 768), axes=(v, v_1), value=data[v, indices[], v_1])",
            "  params: data: TensorType(ScalarType(float32), [1, 128, 768], global, RowMajorLayout), indices: TensorType(ScalarType(int64), [], global, RowMajorLayout), output: TensorType(ScalarType(float32), [1, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Matmul1",
          "type": {
            "name": "Matmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Take3:0",
                  "type": {
                    "string": "float32[1, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:298",
                  "type": {
                    "string": "float32[768, 768]",
                    "shape": {
                      "dimensions": [
                        768,
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: matmul",
            "  compute: TensorCompute(C, shape=(1, 768), axes=(v, v_1), value=ReduceCompute(shape=(768), axes=(v_2), value=(A[v, v_2] * B[v_2, v_1])))",
            "  params: A: TensorType(ScalarType(float32), [1, 768], global, RowMajorLayout), B: TensorType(ScalarType(float32), [768, 768], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddTanh1",
          "type": {
            "name": "FusedAddTanh",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:299",
                  "type": {
                    "string": "float32[768]",
                    "shape": {
                      "dimensions": [
                        768
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddTanh1:0",
                  "type": {
                    "string": "float32[1, 768]",
                    "shape": {
                      "dimensions": [
                        1,
                        768
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_erf",
            "  compute: TensorCompute(y, shape=(1, 768), axes=(v, v_1), value=tanhf((x[0, v_1] + y[v_1])))",
            "  params: x: TensorType(ScalarType(float32), [1, 768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [768], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 768], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}