{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "float32[1, 3, 224, 224]",
                "shape": {
                  "dimensions": [
                    1,
                    3,
                    224,
                    224
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "Add1:0",
              "type": {
                "string": "float32[1, 1000]",
                "shape": {
                  "dimensions": [
                    1,
                    1000
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "FusedConv2dAddRelu1",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "float32[1, 3, 224, 224]",
                    "shape": {
                      "dimensions": [
                        1,
                        3,
                        224,
                        224
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32[64, 3, 7, 7]",
                    "shape": {
                      "dimensions": [
                        64,
                        3,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[3, 3, 3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 112, 112), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(3, 7, 7), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 3)) && (0 <= (((v_2 * 2) + v_5) - 3))) && ((((v_2 * 2) + v_5) - 3) < 224)) && (0 <= (((v_3 * 2) + v_6) - 3))) && ((((v_3 * 2) + v_6) - 3) < 224)) ? input[0, v_4, (((v_2 * 2) + v_5) - 3), (((v_3 * 2) + v_6) - 3)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 3)) && (0 <= v_5)) && (v_5 < 7)) && (0 <= v_6)) && (v_6 < 7)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 3, 224, 224], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 3, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 112, 112], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "MaxPool2d1",
          "type": {
            "name": "MaxPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: max_pool2d",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(3, 3), axes=(v_4, v_5), value=(((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_1)) && (v_1 < 64)) && (0 <= (((v_2 * 2) + v_4) - 1))) && ((((v_2 * 2) + v_4) - 1) < 112)) && (0 <= (((v_3 * 2) + v_5) - 1))) && ((((v_3 * 2) + v_5) - 1) < 112)) ? x[v, v_1, (((v_2 * 2) + v_4) - 1), (((v_3 * 2) + v_5) - 1)] : -1e+30)))",
            "  params: x: TensorType(ScalarType(float32), [1, 64, 112, 112], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu2",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32[64, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(64, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu3",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:5",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(64, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 56)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 64, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d1",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:6",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(64, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[v, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 64, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d2",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:7",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(64, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[v, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 64, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddAddRelu1",
          "type": {
            "name": "FusedAddAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2d2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:8",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=max(((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]) + y_1[0, v_1, 0, 0]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu4",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:9",
                  "type": {
                    "string": "float32[64, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:10",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu5",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:11",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:12",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(64, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 56)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 64, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd1",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:13",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:14",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(64, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu1",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu6",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:15",
                  "type": {
                    "string": "float32[64, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:16",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu7",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:17",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:18",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 64, 56, 56), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(64, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 56)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 64)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [64, 64, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd2",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:19",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:20",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(64, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 56)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 64)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 64, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 64, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu2",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu1:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 56, 56), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu8",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:21",
                  "type": {
                    "string": "float32[128, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:22",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu8:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 56)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 56)) ? input[0, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu9",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu8:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:23",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:24",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu9:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(128, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 28)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 128, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d3",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu9:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:25",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(128, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[v, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 128, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d4",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:26",
                  "type": {
                    "string": "float32[512, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 56)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 56)) ? input[v, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 56, 56], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 256, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddAddRelu2",
          "type": {
            "name": "FusedAddAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2d4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:27",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu2:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=max(((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]) + y_1[0, v_1, 0, 0]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu10",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu2:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:28",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:29",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu10:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu11",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu10:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:30",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:31",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu11:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(128, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 28)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 128, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd3",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu11:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:32",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:33",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(128, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu3",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddAddRelu2:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu12",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:34",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:35",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu13",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:36",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:37",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(128, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 28)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 128, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd4",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:38",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:39",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(128, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu4",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu3:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu14",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:40",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:41",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu14:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu15",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu14:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:42",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:43",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu15:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 128, 28, 28), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(128, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 28)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 128)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [128, 128, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd5",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu15:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:44",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:45",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd5:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(128, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 28)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 128)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 128, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 128, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu5",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd5:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu4:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu5:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 28, 28), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu16",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu5:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:46",
                  "type": {
                    "string": "float32[256, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:47",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu16:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 28)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 28)) ? input[0, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu17",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu16:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:48",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:49",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu17:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d5",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu17:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:50",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d5:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[v, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d6",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu5:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:51",
                  "type": {
                    "string": "float32[1024, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 28)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 28)) ? input[v, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 28, 28], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 512, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddAddRelu3",
          "type": {
            "name": "FusedAddAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d5:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2d6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:52",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu3:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max(((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]) + y_1[0, v_1, 0, 0]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu18",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu3:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:53",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:54",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu18:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu19",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu18:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:55",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:56",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu19:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd6",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu19:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:57",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:58",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu6",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddAddRelu3:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu20",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:59",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:60",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu20:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu21",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu20:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:61",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:62",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu21:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd7",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu21:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:63",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:64",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd7:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu7",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd7:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu6:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu7:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu22",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu7:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:65",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:66",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu22:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu23",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu22:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:67",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:68",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu23:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd8",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu23:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:69",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:70",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd8:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu8",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd8:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu7:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu8:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu24",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu8:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:71",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:72",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu24:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu25",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu24:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:73",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:74",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd9",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:75",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:76",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd9:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu9",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd9:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu8:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu9:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu26",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu9:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:77",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:78",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu27",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:79",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:80",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu27:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 256, 14, 14), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(256, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 14)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 256)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [256, 256, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd10",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu27:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:81",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:82",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd10:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(256, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 14)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 1024)) && (0 <= v_4)) && (v_4 < 256)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 256, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [1024, 256, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu10",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd10:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu9:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu10:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 1024, 14, 14), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu28",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu10:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:83",
                  "type": {
                    "string": "float32[512, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:84",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu28:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 14)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 14)) ? input[0, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 1024, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu29",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu28:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:85",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:86",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu29:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 7)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 512, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d7",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu29:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:87",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d7:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 7)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 7)) ? input[v, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 2048)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [2048, 512, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Conv2d8",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu10:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:88",
                  "type": {
                    "string": "float32[2048, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d8:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  compute: TensorCompute(out, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(1024, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= (((v_2 * 2) + v_5) - 0))) && ((((v_2 * 2) + v_5) - 0) < 14)) && (0 <= (((v_3 * 2) + v_6) - 0))) && ((((v_3 * 2) + v_6) - 0) < 14)) ? input[v, v_4, (((v_2 * 2) + v_5) - 0), (((v_3 * 2) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 2048)) && (0 <= v_4)) && (v_4 < 1024)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))))",
            "  params: input: TensorType(ScalarType(float32), [1, 1024, 14, 14], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [2048, 1024, 1, 1], global, RowMajorLayout), out: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddAddRelu4",
          "type": {
            "name": "FusedAddAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d7:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2d8:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:89",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu4:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_add_relu",
            "  compute: TensorCompute(y, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=max(((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]) + y_1[0, v_1, 0, 0]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu30",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddAddRelu4:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:90",
                  "type": {
                    "string": "float32[512, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:91",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu30:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(2048, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 2048)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 7)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 2048)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 2048, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu31",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu30:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:92",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:93",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu31:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 7)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 512, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd11",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu31:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:94",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:95",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd11:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 7)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 2048)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [2048, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu11",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd11:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddAddRelu4:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu11:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu32",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu11:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:96",
                  "type": {
                    "string": "float32[512, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:97",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu32:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(2048, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 2048)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 7)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 2048)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 2048, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAddRelu33",
          "type": {
            "name": "FusedConv2dAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu32:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:98",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:99",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu33:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add_relu",
            "  compute: TensorCompute(y, shape=(1, 512, 7, 7), axes=(v, v_1, v_2, v_3), value=max((ReduceCompute(shape=(512, 3, 3), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 1))) && ((((v_2 * 1) + v_5) - 1) < 7)) && (0 <= (((v_3 * 1) + v_6) - 1))) && ((((v_3 * 1) + v_6) - 1) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 1), (((v_3 * 1) + v_6) - 1)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 512)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 3)) && (0 <= v_6)) && (v_6 < 3)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]), 0.0))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [512, 512, 3, 3], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedConv2dAdd12",
          "type": {
            "name": "FusedConv2dAdd",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAddRelu33:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:100",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:101",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd12:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[0, 0, 0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_add",
            "  compute: TensorCompute(z, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=(ReduceCompute(shape=(512, 1, 1), axes=(v_4, v_5, v_6), value=((((((((((True && (0 <= 0)) && (0 < 1)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= (((v_2 * 1) + v_5) - 0))) && ((((v_2 * 1) + v_5) - 0) < 7)) && (0 <= (((v_3 * 1) + v_6) - 0))) && ((((v_3 * 1) + v_6) - 0) < 7)) ? input[0, v_4, (((v_2 * 1) + v_5) - 0), (((v_3 * 1) + v_6) - 0)] : 0.0) * (((((((((True && (0 <= v_1)) && (v_1 < 2048)) && (0 <= v_4)) && (v_4 < 512)) && (0 <= v_5)) && (v_5 < 1)) && (0 <= v_6)) && (v_6 < 1)) ? weight[v_1, v_4, v_5, v_6] : 0.0))) + y[0, v_1, 0, 0]))",
            "  params: input: TensorType(ScalarType(float32), [1, 512, 7, 7], global, RowMajorLayout), weight: TensorType(ScalarType(float32), [2048, 512, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 1, 1], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "FusedAddRelu12",
          "type": {
            "name": "FusedAddRelu",
            "category": "dropout"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedConv2dAdd12:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "FusedAddRelu11:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu12:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add_relu",
            "  compute: TensorCompute(y, shape=(1, 2048, 7, 7), axes=(v, v_1, v_2, v_3), value=max((x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]), 0.0))",
            "  params: x: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "AvgPool2d1",
          "type": {
            "name": "AvgPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "FusedAddRelu12:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "(7, 7)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: avg_pool2d",
            "  compute: TensorCompute(y, shape=(1, 2048, 1, 1), axes=(v, v_1, v_2, v_3), value=ReduceCompute(shape=(7, 7), axes=(v_4, v_5), value=(((((((((True && (0 <= v)) && (v < 1)) && (0 <= v_1)) && (v_1 < 2048)) && (0 <= (((v_2 * 1) + v_4) - 0))) && ((((v_2 * 1) + v_4) - 0) < 7)) && (0 <= (((v_3 * 1) + v_5) - 0))) && ((((v_3 * 1) + v_5) - 0) < 7)) ? x[v, v_1, (((v_2 * 1) + v_4) - 0), (((v_3 * 1) + v_5) - 0)] : 0.0)))",
            "  params: x: TensorType(ScalarType(float32), [1, 2048, 7, 7], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048, 1, 1], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Rearrange1",
          "type": {
            "name": "Rearrange",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange1:0",
                  "type": {
                    "string": "float32[1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "plan",
              "type": "Sequence[list]",
              "value": "[[0], [1, 2, 3]]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  compute: TensorCompute(y, shape=(1, 2048), axes=(v, v_1), value=x[((v / 1) % 1), ((v_1 / 1) % 2048), ((v_1 / 1) % 1), ((v_1 / 1) % 1)])",
            "  params: x: TensorType(ScalarType(float32), [1, 2048, 1, 1], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1, 2048], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Matmul1",
          "type": {
            "name": "Matmul",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange1:0",
                  "type": {
                    "string": "float32[1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:102",
                  "type": {
                    "string": "float32[2048, 1000]",
                    "shape": {
                      "dimensions": [
                        2048,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: matmul",
            "  compute: TensorCompute(C, shape=(1, 1000), axes=(v, v_1), value=ReduceCompute(shape=(2048), axes=(v_2), value=(A[v, v_2] * B[v_2, v_1])))",
            "  params: A: TensorType(ScalarType(float32), [1, 2048], global, RowMajorLayout), B: TensorType(ScalarType(float32), [2048, 1000], global, RowMajorLayout), C: TensorType(ScalarType(float32), [1, 1000], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        },
        {
          "name": "Add1",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:103",
                  "type": {
                    "string": "float32[1000]",
                    "shape": {
                      "dimensions": [
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add1:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  compute: TensorCompute(z, shape=(1, 1000), axes=(v, v_1), value=(x[0, v_1] + y[v_1]))",
            "  params: x: TensorType(ScalarType(float32), [1, 1000], global, RowMajorLayout), y: TensorType(ScalarType(float32), [1000], global, RowMajorLayout), z: TensorType(ScalarType(float32), [1, 1000], global, RowMajorLayout)",
            "  worker: Grid(None, None)",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}