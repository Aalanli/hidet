{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "float32[1, 3, 224, 224]",
                "shape": {
                  "dimensions": [
                    1,
                    3,
                    224,
                    224
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "Add102:0",
              "type": {
                "string": "float32[1, 1000]",
                "shape": {
                  "dimensions": [
                    1,
                    1000
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "Pad1",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "float32[1, 3, 224, 224]",
                    "shape": {
                      "dimensions": [
                        1,
                        3,
                        224,
                        224
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad1:0",
                  "type": {
                    "string": "float32[1, 3, 230, 230]",
                    "shape": {
                      "dimensions": [
                        1,
                        3,
                        230,
                        230
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 3, 3, 0, 0, 3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 3, 224, 224], global, row_major)",
            "    out: tensor(float32, [1, 3, 230, 230], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 3, 230, 230], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 3))) && ((0 <= (v_2 - 3)) && ((v_2 - 3) < 224))) && ((0 <= (v_3 - 3)) && ((v_3 - 3) < 224))) ? data[v, v_1, (v_2 - 3), (v_3 - 3)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d1",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad1:0",
                  "type": {
                    "string": "float32[1, 3, 230, 230]",
                    "shape": {
                      "dimensions": [
                        1,
                        3,
                        230,
                        230
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32[64, 3, 7, 7]",
                    "shape": {
                      "dimensions": [
                        64,
                        3,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 3, 230, 230], global, row_major)",
            "    w: tensor(float32, [64, 3, 7, 7], global, row_major)",
            "    out: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => reduce([3, 7, 7], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub1",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply1",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply2",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply2:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add1",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply2:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu1",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 112, 112], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "MaxPool2d1",
          "type": {
            "name": "MaxPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: max_pool2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([3, 3], (v_4, v_5) => (((((((((0 <= v) && (v < 1)) && (0 <= v_1)) && (v_1 < 64)) && (0 <= (((v_2 * 2) + v_4) - 1))) && ((((v_2 * 2) + v_4) - 1) < 112)) && (0 <= (((v_3 * 2) + v_5) - 1))) && ((((v_3 * 2) + v_5) - 1) < 112)) ? x[v, v_1, (((v_2 * 2) + v_4) - 1), (((v_3 * 2) + v_5) - 1)] : -1e+30f), max))",
            ")"
          ]
        },
        {
          "name": "Conv2d2",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:5",
                  "type": {
                    "string": "float32[64, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    w: tensor(float32, [64, 64, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add2",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:6",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub2",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:7",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply3",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:8",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply4",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:9",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add3",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:10",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu2",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad2",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad2:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    out: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 58, 58], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 56))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 56))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d3",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad2:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:11",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    w: tensor(float32, [64, 64, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub3",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:12",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply5",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:13",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply6",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:14",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add4",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:15",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu3",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add4:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d4",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:16",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    w: tensor(float32, [256, 64, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add5",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:17",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub4",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:18",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply7",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:19",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply8",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:20",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add6",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:21",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add6:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d5",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:22",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    w: tensor(float32, [256, 64, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub5",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:23",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply9",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:24",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply9:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply10",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply9:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:25",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply10:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add7",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply10:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:26",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add8",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add6:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Add7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu4",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d6",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:27",
                  "type": {
                    "string": "float32[64, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    w: tensor(float32, [64, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add9",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:28",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub6",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:29",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply11",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:30",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply11:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply12",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply11:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:31",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply12:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add10",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply12:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:32",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu5",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad3",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu5:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad3:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    out: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 58, 58], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 56))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 56))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d7",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad3:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:33",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    w: tensor(float32, [64, 64, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub7",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:34",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply13",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub7:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:35",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply13:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply14",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply13:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:36",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply14:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add11",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply14:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:37",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add11:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu6",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add11:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d8",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:38",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    w: tensor(float32, [256, 64, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add12",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:39",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add12:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub8",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add12:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:40",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply15",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:41",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply15:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply16",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply15:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:42",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply16:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add13",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply16:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:43",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add13:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add14",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add13:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu4:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add14:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu7",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add14:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d9",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:44",
                  "type": {
                    "string": "float32[64, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        64,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    w: tensor(float32, [64, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add15",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:45",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add15:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub9",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add15:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:46",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply17",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:47",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply17:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply18",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply17:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:48",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply18:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add16",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply18:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:49",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add16:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu8",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add16:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu8:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad4",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu8:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad4:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    out: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 58, 58], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 56))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 56))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d10",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad4:0",
                  "type": {
                    "string": "float32[1, 64, 58, 58]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        58,
                        58
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:50",
                  "type": {
                    "string": "float32[64, 64, 3, 3]",
                    "shape": {
                      "dimensions": [
                        64,
                        64,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    w: tensor(float32, [64, 64, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub10",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:51",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply19",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub10:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:52",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply19:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply20",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply19:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:53",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply20:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add17",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply20:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:54",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add17:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu9",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add17:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d11",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:55",
                  "type": {
                    "string": "float32[256, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    w: tensor(float32, [256, 64, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => reduce([64, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add18",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:56",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add18:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub11",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add18:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:57",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply21",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:58",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply21:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply22",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply21:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:59",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply22:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add19",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply22:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:60",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add19:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add20",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add19:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu7:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add20:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    z: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu10",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add20:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu10:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 56, 56], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d12",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu10:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:61",
                  "type": {
                    "string": "float32[128, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    w: tensor(float32, [128, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add21",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:62",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add21:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub12",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add21:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:63",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply23",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:64",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply24",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:65",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply24:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add22",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply24:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:66",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu11",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu11:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad5",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu11:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad5:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    out: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 30, 30], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 28))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 28))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d13",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad5:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:67",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    w: tensor(float32, [128, 128, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub13",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:68",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply25",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:69",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply25:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply26",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply25:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:70",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply26:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add23",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply26:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:71",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu12",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d14",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu12:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:72",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d14:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    w: tensor(float32, [512, 128, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add24",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d14:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:73",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub14",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:74",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub14:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply27",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub14:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:75",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply27:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply28",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply27:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:76",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply28:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add25",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply28:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:77",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add25:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d15",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu10:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:78",
                  "type": {
                    "string": "float32[512, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    w: tensor(float32, [512, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub15",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:79",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply29",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:80",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply29:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply30",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply29:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:81",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply30:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add26",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply30:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:82",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add26:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add27",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add25:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Add26:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add27:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu13",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add27:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu13:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d16",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu13:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:83",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    w: tensor(float32, [128, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add28",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:84",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add28:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub16",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add28:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:85",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply31",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:86",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply31:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply32",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply31:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:87",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply32:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add29",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply32:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:88",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add29:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu14",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add29:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu14:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad6",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu14:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad6:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    out: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 30, 30], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 28))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 28))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d17",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad6:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:89",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    w: tensor(float32, [128, 128, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub17",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:90",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply33",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:91",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply33:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply34",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply33:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:92",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply34:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add30",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply34:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:93",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add30:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu15",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add30:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu15:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d18",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu15:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:94",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    w: tensor(float32, [512, 128, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add31",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:95",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add31:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub18",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add31:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:96",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply35",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:97",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply35:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply36",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply35:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:98",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply36:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add32",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply36:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:99",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add32:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add33",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add32:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu13:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add33:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu16",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add33:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu16:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d19",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu16:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:100",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    w: tensor(float32, [128, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add34",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:101",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add34:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub19",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add34:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:102",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply37",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:103",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply37:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply38",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply37:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:104",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply38:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add35",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply38:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:105",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add35:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu17",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add35:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad7",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu17:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad7:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    out: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 30, 30], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 28))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 28))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d20",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad7:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:106",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    w: tensor(float32, [128, 128, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub20",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:107",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply39",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:108",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply39:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply40",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply39:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:109",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply40:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add36",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply40:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:110",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add36:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu18",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add36:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu18:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d21",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu18:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:111",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    w: tensor(float32, [512, 128, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add37",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:112",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add37:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub21",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add37:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:113",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply41",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:114",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply41:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply42",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply41:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:115",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply42:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add38",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply42:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:116",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add38:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add39",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add38:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu16:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add39:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu19",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add39:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu19:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d22",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu19:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:117",
                  "type": {
                    "string": "float32[128, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        128,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    w: tensor(float32, [128, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add40",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:118",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add40:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub22",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add40:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:119",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply43",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:120",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply43:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply44",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply43:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:121",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply44:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add41",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply44:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:122",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add41:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu20",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add41:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad8",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu20:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad8:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    out: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 30, 30], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 28))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 28))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d23",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad8:0",
                  "type": {
                    "string": "float32[1, 128, 30, 30]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        30,
                        30
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:123",
                  "type": {
                    "string": "float32[128, 128, 3, 3]",
                    "shape": {
                      "dimensions": [
                        128,
                        128,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    w: tensor(float32, [128, 128, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub23",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:124",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply45",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub23:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:125",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply45:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply46",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply45:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:126",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply46:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add42",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply46:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:127",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add42:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu21",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add42:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu21:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 128, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d24",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu21:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:128",
                  "type": {
                    "string": "float32[512, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    w: tensor(float32, [512, 128, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => reduce([128, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add43",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:129",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add43:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub24",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add43:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:130",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply47",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:131",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply47:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply48",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply47:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:132",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply48:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add44",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply48:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:133",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add44:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add45",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add44:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu19:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add45:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    z: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu22",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add45:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu22:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 28, 28], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d25",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu22:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:134",
                  "type": {
                    "string": "float32[256, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    w: tensor(float32, [256, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add46",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:135",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add46:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub25",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add46:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:136",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply49",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub25:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:137",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply49:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply50",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply49:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:138",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply50:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add47",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply50:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:139",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add47:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu23",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add47:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu23:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad9",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu23:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad9:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d26",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad9:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:140",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub26",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:141",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply51",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:142",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply51:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply52",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply51:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:143",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply52:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add48",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply52:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:144",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add48:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu24",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add48:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu24:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d27",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu24:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:145",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d27:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add49",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d27:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:146",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add49:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub27",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add49:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:147",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub27:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply53",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub27:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:148",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply53:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply54",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply53:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:149",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply54:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add50",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply54:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:150",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add50:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d28",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu22:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:151",
                  "type": {
                    "string": "float32[1024, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    w: tensor(float32, [1024, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub28",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:152",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply55",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:153",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply55:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply56",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply55:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:154",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply56:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add51",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply56:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:155",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add51:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add52",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add50:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Add51:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add52:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu25",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add52:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu25:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d29",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu25:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:156",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [256, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add53",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:157",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add53:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub29",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add53:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:158",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply57",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:159",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply57:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply58",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply57:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:160",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply58:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add54",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply58:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:161",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add54:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu26",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add54:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad10",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad10:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d30",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad10:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:162",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub30",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:163",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply59",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:164",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply59:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply60",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply59:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:165",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply60:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add55",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply60:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:166",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add55:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu27",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add55:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu27:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d31",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu27:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:167",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add56",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:168",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add56:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub31",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add56:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:169",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply61",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:170",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply61:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply62",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply61:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:171",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply62:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add57",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply62:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:172",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add57:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add58",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add57:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu25:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add58:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu28",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add58:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d32",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:173",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [256, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add59",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:174",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add59:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub32",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add59:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:175",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply63",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:176",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply63:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply64",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply63:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:177",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply64:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add60",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply64:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:178",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add60:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu29",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add60:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad11",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu29:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad11:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d33",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad11:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:179",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub33",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:180",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply65",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:181",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply65:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply66",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply65:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:182",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply66:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add61",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply66:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:183",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add61:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu30",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add61:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d34",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu30:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:184",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add62",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:185",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add62:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub34",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add62:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:186",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply67",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:187",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply67:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply68",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply67:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:188",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply68:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add63",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply68:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:189",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add63:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add64",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add63:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add64:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu31",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add64:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d35",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:190",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [256, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add65",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:191",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add65:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub35",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add65:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:192",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply69",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:193",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply69:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply70",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply69:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:194",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply70:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add66",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply70:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:195",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add66:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu32",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add66:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad12",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu32:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad12:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d36",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad12:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:196",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub36",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:197",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply71",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:198",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply71:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply72",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply71:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:199",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply72:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add67",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply72:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:200",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add67:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu33",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add67:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d37",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu33:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:201",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add68",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:202",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add68:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub37",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add68:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:203",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply73",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:204",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply73:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply74",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply73:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:205",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply74:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add69",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply74:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:206",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add69:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add70",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add69:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add70:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu34",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add70:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d38",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:207",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [256, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add71",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:208",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add71:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub38",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add71:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:209",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply75",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:210",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply75:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply76",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply75:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:211",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply76:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add72",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply76:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:212",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add72:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu35",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add72:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad13",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu35:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad13:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d39",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad13:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:213",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub39",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:214",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply77",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:215",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply77:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply78",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply77:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:216",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply78:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add73",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply78:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:217",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add73:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu36",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add73:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d40",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu36:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:218",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add74",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:219",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add74:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub40",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add74:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:220",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply79",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:221",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply79:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply80",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply79:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:222",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply80:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add75",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply80:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:223",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add75:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add76",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add75:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add76:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu37",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add76:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d41",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:224",
                  "type": {
                    "string": "float32[256, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        256,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d41:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [256, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add77",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d41:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:225",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add77:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub41",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add77:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:226",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub41:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply81",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub41:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:227",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply81:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply82",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply81:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:228",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply82:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add78",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply82:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:229",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add78:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu38",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add78:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad14",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu38:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad14:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    out: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 16, 16], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 14))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 14))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d42",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad14:0",
                  "type": {
                    "string": "float32[1, 256, 16, 16]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        16,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:230",
                  "type": {
                    "string": "float32[256, 256, 3, 3]",
                    "shape": {
                      "dimensions": [
                        256,
                        256,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d42:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    w: tensor(float32, [256, 256, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub42",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d42:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:231",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub42:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply83",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub42:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:232",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply83:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply84",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply83:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:233",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply84:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add79",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply84:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:234",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add79:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu39",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add79:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 256, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d43",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu39:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:235",
                  "type": {
                    "string": "float32[1024, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1024,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    w: tensor(float32, [1024, 256, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => reduce([256, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add80",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:236",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add80:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub43",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add80:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:237",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply85",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:238",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply85:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply86",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply85:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:239",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply86:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add81",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply86:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:240",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add81:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add82",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add81:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add82:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    z: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu40",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add82:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1024, 14, 14], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d44",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:241",
                  "type": {
                    "string": "float32[512, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [512, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add83",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:242",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add83:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub44",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add83:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:243",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply87",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:244",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply87:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply88",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply87:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:245",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply88:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add84",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply88:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:246",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add84:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu41",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add84:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu41:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad15",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu41:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad15:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    out: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 9, 9], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 7))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 7))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d45",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad15:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:247",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    w: tensor(float32, [512, 512, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub45",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:248",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply89",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:249",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply89:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply90",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply89:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:250",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply90:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add85",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply90:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:251",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add85:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu42",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add85:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu42:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d46",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu42:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:252",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    w: tensor(float32, [2048, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add86",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:253",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add86:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub46",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add86:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:254",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply91",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:255",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply91:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply92",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply91:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:256",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply92:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add87",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply92:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:257",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add87:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d47",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:258",
                  "type": {
                    "string": "float32[2048, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    w: tensor(float32, [2048, 1024, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => reduce([1024, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, ((v_2 * 2) + v_5), ((v_3 * 2) + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub47",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:259",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply93",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:260",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply93:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply94",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply93:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:261",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply94:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add88",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply94:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:262",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add88:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add89",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add87:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Add88:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add89:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu43",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add89:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu43:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d48",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu43:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:263",
                  "type": {
                    "string": "float32[512, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    w: tensor(float32, [512, 2048, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([2048, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add90",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:264",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add90:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub48",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add90:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:265",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply95",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:266",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply95:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply96",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply95:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:267",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply96:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add91",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply96:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:268",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add91:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu44",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add91:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad16",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu44:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad16:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    out: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 9, 9], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 7))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 7))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d49",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad16:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:269",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d49:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    w: tensor(float32, [512, 512, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub49",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d49:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:270",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub49:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply97",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub49:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:271",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply97:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply98",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply97:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:272",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply98:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add92",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply98:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:273",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add92:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu45",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add92:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d50",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu45:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:274",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    w: tensor(float32, [2048, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add93",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:275",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add93:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub50",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add93:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:276",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply99",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:277",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply99:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply100",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply99:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:278",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply100:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add94",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply100:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:279",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add94:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add95",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add94:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu43:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add95:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu46",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add95:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d51",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:280",
                  "type": {
                    "string": "float32[512, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        512,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d51:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    w: tensor(float32, [512, 2048, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([2048, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add96",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d51:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:281",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add96:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub51",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add96:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:282",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub51:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply101",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub51:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:283",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply101:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply102",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply101:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:284",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply102:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add97",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply102:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:285",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add97:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu47",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add97:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu47:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Pad17",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu47:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad17:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    out: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 9, 9], (v, v_1, v_2, v_3) => ((((((0 <= v) && (v < 1)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < 7))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < 7))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f))",
            ")"
          ]
        },
        {
          "name": "Conv2d52",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Pad17:0",
                  "type": {
                    "string": "float32[1, 512, 9, 9]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        9,
                        9
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:286",
                  "type": {
                    "string": "float32[512, 512, 3, 3]",
                    "shape": {
                      "dimensions": [
                        512,
                        512,
                        3,
                        3
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d52:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    w: tensor(float32, [512, 512, 3, 3], global, row_major)",
            "    out: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 3, 3], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Sub52",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d52:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:287",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub52:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply103",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub52:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:288",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply103:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply104",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply103:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:289",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply104:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add98",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply104:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:290",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add98:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Relu48",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add98:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 512, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Conv2d53",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu48:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:291",
                  "type": {
                    "string": "float32[2048, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        2048,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    w: tensor(float32, [2048, 512, 1, 1], global, row_major)",
            "    out: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => reduce([512, 1, 1], (v_4, v_5, v_6) => (x[v, v_4, (v_2 + v_5), (v_3 + v_6)] * w[v_1, v_4, v_5, v_6]), sum))",
            ")"
          ]
        },
        {
          "name": "Add99",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2d53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:292",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add99:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Sub53",
          "type": {
            "name": "Sub",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add99:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:293",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: sub",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] - y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply105",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Sub53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:294",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply105:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Multiply106",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply105:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:295",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply106:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] * y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add100",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Multiply106:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:296",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add100:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, 0, 0]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "Add101",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add100:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Relu46:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add101:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    z: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => (x[0, v_1, v_2, v_3] + y[0, v_1, v_2, v_3]))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            "    y: InverseMap([v_8, v_9, v_10, v_11] => [v_8, v_9, v_10, v_11])",
            ")"
          ]
        },
        {
          "name": "Relu49",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add101:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu49:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 2048, 7, 7], (v, v_1, v_2, v_3) => base.max(x[v, v_1, v_2, v_3], 0.0f))",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "AvgPool2d1",
          "type": {
            "name": "AvgPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Relu49:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "(7, 7)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: avg_pool2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 2048, 1, 1], (v, v_1, v_2, v_3) => reduce([7, 7], (v_4, v_5) => (((((((((0 <= v) && (v < 1)) && (0 <= v_1)) && (v_1 < 2048)) && (0 <= (v_2 + v_4))) && ((v_2 + v_4) < 7)) && (0 <= (v_3 + v_5))) && ((v_3 + v_5) < 7)) ? x[v, v_1, (v_2 + v_4), (v_3 + v_5)] : 0.0f), avg))",
            ")"
          ]
        },
        {
          "name": "Rearrange1",
          "type": {
            "name": "Rearrange",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange1:0",
                  "type": {
                    "string": "float32[1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "plan",
              "type": "Sequence[list]",
              "value": "[[0], [1, 2, 3]]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    y: tensor(float32, [1, 2048], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 2048], (v, v_1) => x[0, (v_1 % 2048), 0, 0])",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3, v_4, v_5] => [v_2, ((v_3 + v_4) + v_5)])",
            ")"
          ]
        },
        {
          "name": "Unsqueeze1",
          "type": {
            "name": "Unsqueeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange1:0",
                  "type": {
                    "string": "float32[1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Unsqueeze1:0",
                  "type": {
                    "string": "float32[1, 1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[0]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048], global, row_major)",
            "    y: tensor(float32, [1, 1, 2048], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1, 2048], (v, v_1, v_2) => x[0, (v_2 % 2048)])",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4] => [0, v_3, v_4])",
            ")"
          ]
        },
        {
          "name": "Reshape1",
          "type": {
            "name": "Reshape",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Unsqueeze1:0",
                  "type": {
                    "string": "float32[1, 1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Reshape1:0",
                  "type": {
                    "string": "float32[1, 1, 8, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        8,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 1, 8, 256]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape",
            "  parameters: ",
            "    x: tensor(float32, [1, 1, 2048], global, row_major)",
            "    y: tensor(float32, [1, 1, 8, 256], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1, 8, 256], (v, v_1, v_2, v_3) => x[0, 0, (((((v * 2048) + (v_1 * 2048)) + (v_2 * 256)) + v_3) % 2048)])",
            ")"
          ]
        },
        {
          "name": "Rearrange2",
          "type": {
            "name": "Rearrange",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Reshape1:0",
                  "type": {
                    "string": "float32[1, 1, 8, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        8,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange2:0",
                  "type": {
                    "string": "float32[8, 1, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "plan",
              "type": "Sequence[list]",
              "value": "[[0, 2], [1], [3]]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 1, 8, 256], global, row_major)",
            "    y: tensor(float32, [8, 1, 256], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([8, 1, 256], (v, v_1, v_2) => x[0, 0, (v % 8), (v_2 % 256)])",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5, v_6] => [((v_3 * 8) + v_5), v_4, v_6])",
            ")"
          ]
        },
        {
          "name": "Matmul1",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Rearrange2:0",
                  "type": {
                    "string": "float32[8, 1, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:297",
                  "type": {
                    "string": "float32[8, 256, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        256,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [8, 1, 256], global, row_major)",
            "    b: tensor(float32, [8, 256, 1000], global, row_major)",
            "    c: tensor(float32, [8, 1, 1000], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([8, 1, 1000], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Reshape2",
          "type": {
            "name": "Reshape",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Reshape2:0",
                  "type": {
                    "string": "float32[1, 8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 8, 1, 1000]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape",
            "  parameters: ",
            "    x: tensor(float32, [8, 1, 1000], global, row_major)",
            "    y: tensor(float32, [1, 8, 1, 1000], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 8, 1, 1000], (v, v_1, v_2, v_3) => x[((((((v * 8000) + (v_1 * 1000)) + (v_2 * 1000)) + v_3) / 1000) % 8), 0, (((((v * 8000) + (v_1 * 1000)) + (v_2 * 1000)) + v_3) % 1000)])",
            ")"
          ]
        },
        {
          "name": "ReduceSum1",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Reshape2:0",
                  "type": {
                    "string": "float32[1, 8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum1:0",
                  "type": {
                    "string": "float32[1, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reduce_sum",
            "  parameters: ",
            "    x: tensor(float32, [1, 8, 1, 1000], global, row_major)",
            "    y: tensor(float32, [1, 1, 1000], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1, 1000], (v, v_1, v_2) => reduce([8], (v_3) => x[v, v_3, v_1, v_2], sum))",
            ")"
          ]
        },
        {
          "name": "Squeeze1",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum1:0",
                  "type": {
                    "string": "float32[1, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Squeeze1:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[0]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 1, 1000], global, row_major)",
            "    y: tensor(float32, [1, 1000], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 1000], (v, v_1) => x[0, 0, (v_1 % 1000)])",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3, v_4] => [v_3, v_4])",
            ")"
          ]
        },
        {
          "name": "Add102",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Squeeze1:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:298",
                  "type": {
                    "string": "float32[1000]",
                    "shape": {
                      "dimensions": [
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Add102:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 1000], global, row_major)",
            "    y: tensor(float32, [1000], global, row_major)",
            "    z: tensor(float32, [1, 1000], global, row_major)",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: grid([1, 1000], (v, v_1) => (x[0, v_1] + y[v_1]))",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3] => [v_2, v_3])",
            "    y: InverseMap([v_4] => [v_4])",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}