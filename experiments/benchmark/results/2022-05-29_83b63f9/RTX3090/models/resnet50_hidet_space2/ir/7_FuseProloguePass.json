{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "float32[1, 3, 224, 224]",
                "shape": {
                  "dimensions": [
                    1,
                    3,
                    224,
                    224
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "ReduceSum10:0",
              "type": {
                "string": "float32[1, 1000]",
                "shape": {
                  "dimensions": [
                    1,
                    1000
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "Matmul1",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32[1, 147, 64]",
                    "shape": {
                      "dimensions": [
                        1,
                        147,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "float32[1, 3, 224, 224]",
                    "shape": {
                      "dimensions": [
                        1,
                        3,
                        224,
                        224
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 147, 64], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    data: tensor(float32, [1, 3, 224, 224], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 12544, 147], global, row_major)",
            "    c: grid([1, 12544, 64], (v, v_1, v_2) => reduce([147], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => ((((((0 <= ((v_5 % 12544) / 12544)) && (((v_5 % 12544) / 12544) < 1)) && ((0 <= ((v_6 % 147) / 49)) && (((v_6 % 147) / 49) < 3))) && ((0 <= ((((((v_5 % 12544) / 112) % 112) * 2) + (((v_6 % 147) / 7) % 7)) - 3)) && (((((((v_5 % 12544) / 112) % 112) * 2) + (((v_6 % 147) / 7) % 7)) - 3) < 224))) && ((0 <= (((((v_5 % 12544) % 112) * 2) + ((v_6 % 147) % 7)) - 3)) && ((((((v_5 % 12544) % 112) * 2) + ((v_6 % 147) % 7)) - 3) < 224))) ? data[((v_5 % 12544) / 12544), ((v_6 % 147) / 49), ((((((v_5 % 12544) / 112) % 112) * 2) + (((v_6 % 147) / 7) % 7)) - 3), (((((v_5 % 12544) % 112) * 2) + ((v_6 % 147) % 7)) - 3)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 12544), i_2, ((i_1 / 112) % 112), (i_1 % 112)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "MaxPool2d1",
          "type": {
            "name": "MaxPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul1:0",
                  "type": {
                    "string": "float32[1, 64, 112, 112]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        112,
                        112
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "[1, 1, 1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: max_pool2d",
            "  parameters: ",
            "    x: tensor(float32, [1, 64, 112, 112], global, row_major)",
            "    y: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: grid([1, 64, 56, 56], (v, v_1, v_2, v_3) => reduce([3, 3], (v_4, v_5) => (((((((((0 <= v) && (v < 1)) && (0 <= v_1)) && (v_1 < 64)) && (0 <= (((v_2 * 2) + v_4) - 1))) && ((((v_2 * 2) + v_4) - 1) < 112)) && (0 <= (((v_3 * 2) + v_5) - 1))) && ((((v_3 * 2) + v_5) - 1) < 112)) ? x[v, v_1, (((v_2 * 2) + v_4) - 1), (((v_3 * 2) + v_5) - 1)] : -1e+30f), max))",
            ")"
          ]
        },
        {
          "name": "Matmul2",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32[1, 64, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform",
            "  parameters: ",
            "    b: tensor(float32, [1, 64, 256], global, row_major)",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 64], global, row_major)",
            "    c: grid([1, 3136, 256], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 64), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => orig_value, out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul3",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32[1, 64, 64]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "MaxPool2d1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 64, 64], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 64], global, row_major)",
            "    c: grid([1, 3136, 64], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 64), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform1",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform1:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    tile: grid([64, 784, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 784), v, ((((v_1 / 28) % 28) * 2) + v_2), (((v_1 % 28) * 2) + v_3)])",
            "    y: grid([4, 4, 64, 784], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 64))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 56))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 56))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul4",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:5",
                  "type": {
                    "string": "float32[16, 64, 64]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform1:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul4:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 64, 64], global, row_major)",
            "    b: tensor(float32, [16, 64, 784], global, row_major)",
            "    c: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 64, 784], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform1",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:6",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul4:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 64, 58, 58]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 64, 784], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 64, 784], global, row_major)",
            "    inverse: grid([2, 2, 64, 784], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 64, 56, 56], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 784) + ((v_8 / 2) * 28)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 50176) % 16), ((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 784) % 64), (((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) % 784)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul5",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:7",
                  "type": {
                    "string": "float32[1, 64, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul2:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:8",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform1:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 64, 256], global, row_major)",
            "    y: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y_2: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 64], global, row_major)",
            "    c: grid([1, 3136, 256], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 64), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, ((i_1 / 56) % 56), (i_1 % 56)]) + y_1[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul6",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:9",
                  "type": {
                    "string": "float32[1, 256, 64]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:10",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 64], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 256], global, row_major)",
            "    c: grid([1, 3136, 64], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 256), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform2",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul6:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform2:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    tile: grid([64, 784, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 784), v, ((((v_1 / 28) % 28) * 2) + v_2), (((v_1 % 28) * 2) + v_3)])",
            "    y: grid([4, 4, 64, 784], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 64))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 56))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 56))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul7",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:11",
                  "type": {
                    "string": "float32[16, 64, 64]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform2:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul7:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 64, 64], global, row_major)",
            "    b: tensor(float32, [16, 64, 784], global, row_major)",
            "    c: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 64, 784], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform2",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:12",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul7:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 64, 58, 58]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 64, 784], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 64, 784], global, row_major)",
            "    inverse: grid([2, 2, 64, 784], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 64, 56, 56], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 784) + ((v_8 / 2) * 28)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 50176) % 16), ((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 784) % 64), (((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) % 784)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul8",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:13",
                  "type": {
                    "string": "float32[1, 64, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:14",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul5:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform2:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 64, 256], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y_2: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 64], global, row_major)",
            "    c: grid([1, 3136, 256], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 64), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 56) % 56), (i_1 % 56)]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul9",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:15",
                  "type": {
                    "string": "float32[1, 256, 64]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:16",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 64], global, row_major)",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 256], global, row_major)",
            "    c: grid([1, 3136, 64], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 256), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform3",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul9:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform3:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 64, 58, 58], global, row_major)",
            "    tile: grid([64, 784, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 784), v, ((((v_1 / 28) % 28) * 2) + v_2), (((v_1 % 28) * 2) + v_3)])",
            "    y: grid([4, 4, 64, 784], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 64))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 56))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 56))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul10",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:17",
                  "type": {
                    "string": "float32[16, 64, 64]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        64
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform3:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul10:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 64, 64], global, row_major)",
            "    b: tensor(float32, [16, 64, 784], global, row_major)",
            "    c: tensor(float32, [16, 64, 784], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 64, 784], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform3",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:18",
                  "type": {
                    "string": "float32[1, 64, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul10:0",
                  "type": {
                    "string": "float32[16, 64, 784]",
                    "shape": {
                      "dimensions": [
                        16,
                        64,
                        784
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 64, 58, 58]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 64, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 64, 784], global, row_major)",
            "    y_1: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 64, 784], global, row_major)",
            "    inverse: grid([2, 2, 64, 784], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 64, 56, 56], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 784) + ((v_8 / 2) * 28)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 50176) % 16), ((((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) / 784) % 64), (((((v_10 * 200704) + (v_11 * 50176)) + (v_12 * 784)) + v_13) % 784)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul11",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:19",
                  "type": {
                    "string": "float32[1, 64, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:20",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul8:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform3:0",
                  "type": {
                    "string": "float32[1, 64, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        64,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 64, 256], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    x: tensor(float32, [1, 64, 56, 56], global, row_major)",
            "    y_2: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 3136, 64], global, row_major)",
            "    c: grid([1, 3136, 256], (v, v_1, v_2) => reduce([64], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 3136) / 3136), (v_6 % 64), (((v_5 % 3136) / 56) % 56), ((v_5 % 3136) % 56)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 56) % 56), (i_1 % 56)]), 0.0f), out_indices=((i_1 / 3136), i_2, ((i_1 / 56) % 56), (i_1 % 56)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul12",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:21",
                  "type": {
                    "string": "float32[1, 256, 512]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul12:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 512], global, row_major)",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 256], global, row_major)",
            "    c: grid([1, 784, 512], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 256), ((((v_5 % 784) / 28) % 28) * 2), (((v_5 % 784) % 28) * 2)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => orig_value, out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul13",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:22",
                  "type": {
                    "string": "float32[1, 256, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:23",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul11:0",
                  "type": {
                    "string": "float32[1, 256, 56, 56]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        56,
                        56
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 128], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 256, 56, 56], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 256], global, row_major)",
            "    c: grid([1, 784, 128], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 256), ((((v_5 % 784) / 28) % 28) * 2), (((v_5 % 784) % 28) * 2)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform4",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul13:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform4:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    tile: grid([128, 196, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 196), v, ((((v_1 / 14) % 14) * 2) + v_2), (((v_1 % 14) * 2) + v_3)])",
            "    y: grid([4, 4, 128, 196], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 128))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 28))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 28))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul14",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:24",
                  "type": {
                    "string": "float32[16, 128, 128]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform4:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul14:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 128, 128], global, row_major)",
            "    b: tensor(float32, [16, 128, 196], global, row_major)",
            "    c: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 128, 196], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform4",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:25",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul14:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform4:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 30, 30]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 128, 196], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 128, 196], global, row_major)",
            "    inverse: grid([2, 2, 128, 196], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 128, 28, 28], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 196) + ((v_8 / 2) * 14)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 25088) % 16), ((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 196) % 128), (((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) % 196)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul15",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:26",
                  "type": {
                    "string": "float32[1, 128, 512]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul12:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:27",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform4:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 128, 512], global, row_major)",
            "    y: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y_2: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 128], global, row_major)",
            "    c: grid([1, 784, 512], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 128), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, ((i_1 / 28) % 28), (i_1 % 28)]) + y_1[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul16",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:28",
                  "type": {
                    "string": "float32[1, 512, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:29",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 128], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 512], global, row_major)",
            "    c: grid([1, 784, 128], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 512), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform5",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul16:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform5:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    tile: grid([128, 196, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 196), v, ((((v_1 / 14) % 14) * 2) + v_2), (((v_1 % 14) * 2) + v_3)])",
            "    y: grid([4, 4, 128, 196], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 128))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 28))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 28))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul17",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:30",
                  "type": {
                    "string": "float32[16, 128, 128]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform5:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul17:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 128, 128], global, row_major)",
            "    b: tensor(float32, [16, 128, 196], global, row_major)",
            "    c: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 128, 196], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform5",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:31",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul17:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform5:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 30, 30]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 128, 196], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 128, 196], global, row_major)",
            "    inverse: grid([2, 2, 128, 196], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 128, 28, 28], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 196) + ((v_8 / 2) * 14)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 25088) % 16), ((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 196) % 128), (((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) % 196)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul18",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:32",
                  "type": {
                    "string": "float32[1, 128, 512]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:33",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul15:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform5:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 128, 512], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y_2: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 128], global, row_major)",
            "    c: grid([1, 784, 512], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 128), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 28) % 28), (i_1 % 28)]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul19",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:34",
                  "type": {
                    "string": "float32[1, 512, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:35",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 128], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 512], global, row_major)",
            "    c: grid([1, 784, 128], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 512), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform6",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul19:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform6:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    tile: grid([128, 196, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 196), v, ((((v_1 / 14) % 14) * 2) + v_2), (((v_1 % 14) * 2) + v_3)])",
            "    y: grid([4, 4, 128, 196], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 128))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 28))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 28))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul20",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:36",
                  "type": {
                    "string": "float32[16, 128, 128]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform6:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul20:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 128, 128], global, row_major)",
            "    b: tensor(float32, [16, 128, 196], global, row_major)",
            "    c: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 128, 196], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform6",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:37",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul20:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform6:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 30, 30]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 128, 196], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 128, 196], global, row_major)",
            "    inverse: grid([2, 2, 128, 196], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 128, 28, 28], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 196) + ((v_8 / 2) * 14)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 25088) % 16), ((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 196) % 128), (((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) % 196)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul21",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:38",
                  "type": {
                    "string": "float32[1, 128, 512]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:39",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul18:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform6:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 128, 512], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y_2: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 128], global, row_major)",
            "    c: grid([1, 784, 512], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 128), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 28) % 28), (i_1 % 28)]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul22",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:40",
                  "type": {
                    "string": "float32[1, 512, 128]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:41",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 128], global, row_major)",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 512], global, row_major)",
            "    c: grid([1, 784, 128], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 512), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform7",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul22:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform7:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 128, 30, 30], global, row_major)",
            "    tile: grid([128, 196, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 196), v, ((((v_1 / 14) % 14) * 2) + v_2), (((v_1 % 14) * 2) + v_3)])",
            "    y: grid([4, 4, 128, 196], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 128))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 28))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 28))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul23",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:42",
                  "type": {
                    "string": "float32[16, 128, 128]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        128
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform7:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul23:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 128, 128], global, row_major)",
            "    b: tensor(float32, [16, 128, 196], global, row_major)",
            "    c: tensor(float32, [16, 128, 196], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 128, 196], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform7",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:43",
                  "type": {
                    "string": "float32[1, 128, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul23:0",
                  "type": {
                    "string": "float32[16, 128, 196]",
                    "shape": {
                      "dimensions": [
                        16,
                        128,
                        196
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform7:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 128, 30, 30]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 128, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 128, 196], global, row_major)",
            "    y_1: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 128, 196], global, row_major)",
            "    inverse: grid([2, 2, 128, 196], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 128, 28, 28], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 196) + ((v_8 / 2) * 14)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 25088) % 16), ((((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) / 196) % 128), (((((v_10 * 100352) + (v_11 * 25088)) + (v_12 * 196)) + v_13) % 196)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul24",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:44",
                  "type": {
                    "string": "float32[1, 128, 512]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:45",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul21:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform7:0",
                  "type": {
                    "string": "float32[1, 128, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        128,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 128, 512], global, row_major)",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    x: tensor(float32, [1, 128, 28, 28], global, row_major)",
            "    y_2: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 784, 128], global, row_major)",
            "    c: grid([1, 784, 512], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 784) / 784), (v_6 % 128), (((v_5 % 784) / 28) % 28), ((v_5 % 784) % 28)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 28) % 28), (i_1 % 28)]), 0.0f), out_indices=((i_1 / 784), i_2, ((i_1 / 28) % 28), (i_1 % 28)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul25",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:46",
                  "type": {
                    "string": "float32[1, 512, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul25:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 1024], global, row_major)",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 512], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 512), ((((v_5 % 196) / 14) % 14) * 2), (((v_5 % 196) % 14) * 2)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => orig_value, out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul26",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:47",
                  "type": {
                    "string": "float32[1, 512, 256]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:48",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul24:0",
                  "type": {
                    "string": "float32[1, 512, 28, 28]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        28,
                        28
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 256], global, row_major)",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 512, 28, 28], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 512], global, row_major)",
            "    c: grid([1, 196, 256], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 512), ((((v_5 % 196) / 14) % 14) * 2), (((v_5 % 196) % 14) * 2)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform8",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul26:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform8:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul27",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:49",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform8:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul27:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform8",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:50",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul27:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform8:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul28",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:51",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul25:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:52",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform8:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]) + y_1[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul29",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:53",
                  "type": {
                    "string": "float32[8, 128, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul29:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 256], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 196, 256], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 196, 128], global, row_major)",
            "    c: grid([8, 196, 256], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 196), ((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), (((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 14) % 14), ((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) % 14)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum1",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:54",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul29:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum1:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 196, 256], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 196, 256], global, row_major)",
            "    y: grid([1, 196, 256], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 50176) % 8), ((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 256) % 196), (((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) % 256)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform9",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum1:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform9:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul30",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:55",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform9:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul30:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform9",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:56",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul30:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform9:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul31",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:57",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:58",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul28:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform9:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul32",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:59",
                  "type": {
                    "string": "float32[8, 128, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul32:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 256], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 196, 256], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 196, 128], global, row_major)",
            "    c: grid([8, 196, 256], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 196), ((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), (((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 14) % 14), ((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) % 14)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum2",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:60",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul32:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum2:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 196, 256], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 196, 256], global, row_major)",
            "    y: grid([1, 196, 256], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 50176) % 8), ((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 256) % 196), (((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) % 256)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform10",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum2:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform10:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul33",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:61",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform10:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul33:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform10",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:62",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul33:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform10:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul34",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:63",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:64",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul31:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform10:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul35",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:65",
                  "type": {
                    "string": "float32[8, 128, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul35:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 256], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 196, 256], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 196, 128], global, row_major)",
            "    c: grid([8, 196, 256], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 196), ((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), (((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 14) % 14), ((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) % 14)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum3",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:66",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul35:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum3:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 196, 256], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 196, 256], global, row_major)",
            "    y: grid([1, 196, 256], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 50176) % 8), ((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 256) % 196), (((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) % 256)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform11",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum3:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform11:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul36",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:67",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform11:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul36:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform11",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:68",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul36:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform11:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul37",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:69",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:70",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul34:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform11:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul38",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:71",
                  "type": {
                    "string": "float32[8, 128, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul38:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 256], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 196, 256], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 196, 128], global, row_major)",
            "    c: grid([8, 196, 256], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 196), ((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), (((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 14) % 14), ((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) % 14)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum4",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:72",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul38:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum4:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 196, 256], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 196, 256], global, row_major)",
            "    y: grid([1, 196, 256], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 50176) % 8), ((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 256) % 196), (((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) % 256)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform12",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum4:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform12:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul39",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:73",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform12:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul39:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform12",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:74",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul39:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform12:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul40",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:75",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:76",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul37:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform12:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul41",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:77",
                  "type": {
                    "string": "float32[8, 128, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul41:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 256], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 196, 256], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 196, 128], global, row_major)",
            "    c: grid([8, 196, 256], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 196), ((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), (((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) / 14) % 14), ((((((((0 * 200704) + ((v_5 % 196) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 196) % 196) % 14)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum5",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:78",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul41:0",
                  "type": {
                    "string": "float32[8, 196, 256]",
                    "shape": {
                      "dimensions": [
                        8,
                        196,
                        256
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum5:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 196, 256], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 196, 256], global, row_major)",
            "    y: grid([1, 196, 256], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 50176) % 8), ((((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) / 256) % 196), (((((v_4 * 401408) + (v_5 * 50176)) + (v_6 * 256)) + v_7) % 256)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform13",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum5:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform13:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 256, 16, 16], global, row_major)",
            "    tile: grid([256, 49, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 49), v, ((((v_1 / 7) % 7) * 2) + v_2), (((v_1 % 7) * 2) + v_3)])",
            "    y: grid([4, 4, 256, 49], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 256))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 14))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 14))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul42",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:79",
                  "type": {
                    "string": "float32[16, 256, 256]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        256
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform13:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul42:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 256, 256], global, row_major)",
            "    b: tensor(float32, [16, 256, 49], global, row_major)",
            "    c: tensor(float32, [16, 256, 49], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 256, 49], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform13",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:80",
                  "type": {
                    "string": "float32[1, 256, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul42:0",
                  "type": {
                    "string": "float32[16, 256, 49]",
                    "shape": {
                      "dimensions": [
                        16,
                        256,
                        49
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform13:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 256, 16, 16]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 256, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 256, 49], global, row_major)",
            "    y_1: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 256, 49], global, row_major)",
            "    inverse: grid([2, 2, 256, 49], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 256, 14, 14], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 49) + ((v_8 / 2) * 7)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 12544) % 16), ((((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) / 49) % 256), (((((v_10 * 50176) + (v_11 * 12544)) + (v_12 * 49)) + v_13) % 49)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul43",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:81",
                  "type": {
                    "string": "float32[1, 256, 1024]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        1024
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:82",
                  "type": {
                    "string": "float32[1, 1024, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul40:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform13:0",
                  "type": {
                    "string": "float32[1, 256, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        256,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 256, 1024], global, row_major)",
            "    y: tensor(float32, [1, 1024, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    x: tensor(float32, [1, 256, 14, 14], global, row_major)",
            "    y_2: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 196, 256], global, row_major)",
            "    c: grid([1, 196, 1024], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 196) / 196), (v_6 % 256), (((v_5 % 196) / 14) % 14), ((v_5 % 196) % 14)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 14) % 14), (i_1 % 14)]), 0.0f), out_indices=((i_1 / 196), i_2, ((i_1 / 14) % 14), (i_1 % 14)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul44",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:83",
                  "type": {
                    "string": "float32[8, 128, 2048]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul44:0",
                  "type": {
                    "string": "float32[8, 49, 2048]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 2048], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 49, 2048], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 49, 128], global, row_major)",
            "    c: grid([8, 49, 2048], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) / 49), ((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), ((((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) / 7) % 7) * 2), (((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) % 7) * 2)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum6",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul44:0",
                  "type": {
                    "string": "float32[8, 49, 2048]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum6:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform",
            "  parameters: ",
            "    x: tensor(float32, [8, 49, 2048], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 49, 2048], global, row_major)",
            "    y: grid([1, 49, 2048], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 802816) + (v_5 * 100352)) + (v_6 * 2048)) + v_7) / 100352) % 8), ((((((v_4 * 802816) + (v_5 * 100352)) + (v_6 * 2048)) + v_7) / 2048) % 49), (((((v_4 * 802816) + (v_5 * 100352)) + (v_6 * 2048)) + v_7) % 2048)], extra_inputs: [x])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2), orig_value => orig_value, out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul45",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:84",
                  "type": {
                    "string": "float32[8, 128, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        128,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul43:0",
                  "type": {
                    "string": "float32[1, 1024, 14, 14]",
                    "shape": {
                      "dimensions": [
                        1,
                        1024,
                        14,
                        14
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul45:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 128, 512], global, row_major)",
            "    x: tensor(float32, [1, 1024, 14, 14], global, row_major)",
            "    c: tensor(float32, [8, 49, 512], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 49, 128], global, row_major)",
            "    c: grid([8, 49, 512], (v, v_1, v_2) => reduce([128], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) / 49), ((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) % 1024) % 1024), ((((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) / 7) % 7) * 2), (((((((((0 * 50176) + ((v_5 % 49) * 1024)) + ((v_4 % 8) * 128)) + (v_6 % 128)) / 1024) % 49) % 49) % 7) * 2)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum7",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:85",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul45:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum7:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 49, 512], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 49, 512], global, row_major)",
            "    y: grid([1, 49, 512], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 25088) % 8), ((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 512) % 49), (((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) % 512)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform14",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum7:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform14:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    tile: grid([512, 16, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 16), v, ((((v_1 / 4) % 4) * 2) + v_2), (((v_1 % 4) * 2) + v_3)])",
            "    y: grid([4, 4, 512, 16], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 512))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 7))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 7))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul46",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:86",
                  "type": {
                    "string": "float32[16, 512, 512]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform14:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul46:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 512, 512], global, row_major)",
            "    b: tensor(float32, [16, 512, 16], global, row_major)",
            "    c: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 512, 16], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform14",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:87",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul46:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform14:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 512, 9, 9]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 512, 16], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 512, 16], global, row_major)",
            "    inverse: grid([2, 2, 512, 16], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 512, 7, 7], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 16) + ((v_8 / 2) * 4)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 8192) % 16), ((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 16) % 512), (((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) % 16)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul47",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:88",
                  "type": {
                    "string": "float32[1, 512, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "ReduceSum6:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "const:89",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform14:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 2048], global, row_major)",
            "    y: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y_1: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y_2: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 49, 512], global, row_major)",
            "    c: grid([1, 49, 2048], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 49) / 49), (v_6 % 512), (((v_5 % 49) / 7) % 7), ((v_5 % 49) % 7)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, ((i_1 / 7) % 7), (i_1 % 7)]) + y_1[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul48",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:90",
                  "type": {
                    "string": "float32[8, 256, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        256,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul48:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 256, 512], global, row_major)",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    c: tensor(float32, [8, 49, 512], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 49, 256], global, row_major)",
            "    c: grid([8, 49, 512], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) / 49), ((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) % 2048) % 2048), (((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) / 7) % 7), ((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) % 7)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum8",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:91",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul48:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum8:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 49, 512], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 49, 512], global, row_major)",
            "    y: grid([1, 49, 512], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 25088) % 8), ((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 512) % 49), (((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) % 512)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform15",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum8:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform15:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    tile: grid([512, 16, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 16), v, ((((v_1 / 4) % 4) * 2) + v_2), (((v_1 % 4) * 2) + v_3)])",
            "    y: grid([4, 4, 512, 16], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 512))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 7))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 7))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul49",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:92",
                  "type": {
                    "string": "float32[16, 512, 512]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform15:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul49:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 512, 512], global, row_major)",
            "    b: tensor(float32, [16, 512, 16], global, row_major)",
            "    c: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 512, 16], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform15",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:93",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul49:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform15:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 512, 9, 9]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 512, 16], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 512, 16], global, row_major)",
            "    inverse: grid([2, 2, 512, 16], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 512, 7, 7], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 16) + ((v_8 / 2) * 4)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 8192) % 16), ((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 16) % 512), (((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) % 16)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul50",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:94",
                  "type": {
                    "string": "float32[1, 512, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:95",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul47:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform15:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 2048], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y_2: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 49, 512], global, row_major)",
            "    c: grid([1, 49, 2048], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 49) / 49), (v_6 % 512), (((v_5 % 49) / 7) % 7), ((v_5 % 49) % 7)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 7) % 7), (i_1 % 7)]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "Matmul51",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:96",
                  "type": {
                    "string": "float32[8, 256, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        256,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul51:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 256, 512], global, row_major)",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    c: tensor(float32, [8, 49, 512], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 49, 256], global, row_major)",
            "    c: grid([8, 49, 512], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) / 49), ((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) % 2048) % 2048), (((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) / 7) % 7), ((((((((0 * 100352) + ((v_5 % 49) * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) / 2048) % 49) % 49) % 7)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum9",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:97",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul51:0",
                  "type": {
                    "string": "float32[8, 49, 512]",
                    "shape": {
                      "dimensions": [
                        8,
                        49,
                        512
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum9:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_conv2d_gemm_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [8, 49, 512], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_2]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 49, 512], global, row_major)",
            "    y: grid([1, 49, 512], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 25088) % 8), ((((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) / 512) % 49), (((((v_4 * 200704) + (v_5 * 25088)) + (v_6 * 512)) + v_7) % 512)], extra_inputs: [x])",
            "  epilogue:",
            "    y_2: Epilogue((i, i_1, i_2), orig_value => base.max((orig_value + y[0, i_2, 0, 0]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradImageTransform16",
          "type": {
            "name": "Conv2dWinogradImageTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum9:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform16:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad_conv2d_winograd_image_transform_rearrange",
            "  parameters: ",
            "    data: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 512, 9, 9], global, row_major)",
            "    tile: grid([512, 16, 4, 4], (v, v_1, v_2, v_3) => x[(v_1 / 16), v, ((((v_1 / 4) % 4) * 2) + v_2), (((v_1 % 4) * 2) + v_3)])",
            "    y: grid([4, 4, 512, 16], (v_4, v_5, v_6, v_7) => reduce([4, 4], (v_8, v_9) => ((cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_4, v_8]) * tile[v_6, v_7, v_8, v_9]) * cast(float32, ConstTensor((4, 4), tensor(float32, [4, 4], host, row_major))[v_5, v_9])), sum))",
            "  prologue:",
            "    x: Prologue((v_10, v_11, v_12, v_13) => ((((((0 <= v_10) && (v_10 < 1)) && ((0 <= v_11) && (v_11 < 512))) && ((0 <= (v_12 - 1)) && ((v_12 - 1) < 7))) && ((0 <= (v_13 - 1)) && ((v_13 - 1) < 7))) ? data[v_10, v_11, (v_12 - 1), (v_13 - 1)] : 0.0f), extra_inputs: [data])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(((i * 4) + i_1), i_2, i_3), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul52",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:98",
                  "type": {
                    "string": "float32[16, 512, 512]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        512
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Conv2dWinogradImageTransform16:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul52:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [16, 512, 512], global, row_major)",
            "    b: tensor(float32, [16, 512, 16], global, row_major)",
            "    c: tensor(float32, [16, 512, 16], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: grid([16, 512, 16], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            ")"
          ]
        },
        {
          "name": "Conv2dWinogradInverseTransform16",
          "type": {
            "name": "Conv2dWinogradInverseTransform",
            "category": "custom"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:99",
                  "type": {
                    "string": "float32[1, 512, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul52:0",
                  "type": {
                    "string": "float32[16, 512, 16]",
                    "shape": {
                      "dimensions": [
                        16,
                        512,
                        16
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform16:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "input_shape",
              "type": "Sequence[int]",
              "value": "[1, 512, 9, 9]",
              "visible": true,
              "description": ""
            },
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "[3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ms",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_conv2d_winograd_inverse_transform_add_relu",
            "  parameters: ",
            "    y: tensor(float32, [1, 512, 1, 1], global, row_major)",
            "    x: tensor(float32, [16, 512, 16], global, row_major)",
            "    y_1: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "  inputs: [y_2]",
            "  outputs: [output]",
            "  computations: ",
            "    y: tensor(float32, [4, 4, 512, 16], global, row_major)",
            "    inverse: grid([2, 2, 512, 16], (v, v_1, v_2, v_3) => reduce([4, 4], (v_4, v_5) => ((cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v, v_4]) * y_2[v_4, v_5, v_2, v_3]) * cast(float32, ConstTensor((2, 4), tensor(float32, [2, 4], host, row_major))[v_1, v_5])), sum))",
            "    output: grid([1, 512, 7, 7], (v_6, v_7, v_8, v_9) => inverse[(v_8 % 2), (v_9 % 2), v_7, (((v_6 * 16) + ((v_8 / 2) * 4)) + (v_9 / 2))])",
            "  prologue:",
            "    y_2: Prologue((v_10, v_11, v_12, v_13) => x[((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 8192) % 16), ((((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) / 16) % 512), (((((v_10 * 32768) + (v_11 * 8192)) + (v_12 * 16)) + v_13) % 16)], extra_inputs: [x])",
            "  epilogue:",
            "    output: Epilogue((i, i_1, i_2, i_3), orig_value => base.max((orig_value + y[0, i_1, 0, 0]), 0.0f), out_indices=(i, i_1, i_2, i_3), out_tensor=y_1)",
            ")"
          ]
        },
        {
          "name": "Matmul53",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:100",
                  "type": {
                    "string": "float32[1, 512, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:101",
                  "type": {
                    "string": "float32[1, 2048, 1, 1]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        1,
                        1
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "2",
              "arguments": [
                {
                  "name": "Matmul50:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "3",
              "arguments": [
                {
                  "name": "Conv2dWinogradInverseTransform16:0",
                  "type": {
                    "string": "float32[1, 512, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        512,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d_gemm_image_transform_rearrange_matmul_rearrange_conv2d_gemm_inverse_transform_add_add_relu",
            "  parameters: ",
            "    b: tensor(float32, [1, 512, 2048], global, row_major)",
            "    y: tensor(float32, [1, 2048, 1, 1], global, row_major)",
            "    y_1: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    x: tensor(float32, [1, 512, 7, 7], global, row_major)",
            "    y_2: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [1, 49, 512], global, row_major)",
            "    c: grid([1, 49, 2048], (v, v_1, v_2) => reduce([512], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[((v_5 % 49) / 49), (v_6 % 512), (((v_5 % 49) / 7) % 7), ((v_5 % 49) % 7)], extra_inputs: [x])",
            "  epilogue:",
            "    c: Epilogue((i, i_1, i_2), orig_value => base.max(((orig_value + y[0, i_2, 0, 0]) + y_1[0, i_2, ((i_1 / 7) % 7), (i_1 % 7)]), 0.0f), out_indices=((i_1 / 49), i_2, ((i_1 / 7) % 7), (i_1 % 7)), out_tensor=y_2)",
            ")"
          ]
        },
        {
          "name": "AvgPool2d1",
          "type": {
            "name": "AvgPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul53:0",
                  "type": {
                    "string": "float32[1, 2048, 7, 7]",
                    "shape": {
                      "dimensions": [
                        1,
                        2048,
                        7,
                        7
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[int]",
              "value": "(7, 7)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: avg_pool2d_rearrange_rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 2048, 7, 7], global, row_major)",
            "    y: tensor(float32, [1, 1, 2048], global, row_major)",
            "  inputs: [x]",
            "  outputs: [y_1]",
            "  computations: ",
            "    y: grid([1, 2048, 1, 1], (v, v_1, v_2, v_3) => reduce([7, 7], (v_4, v_5) => (((((((((0 <= v) && (v < 1)) && (0 <= v_1)) && (v_1 < 2048)) && (0 <= (v_2 + v_4))) && ((v_2 + v_4) < 7)) && (0 <= (v_3 + v_5))) && ((v_3 + v_5) < 7)) ? x[v, v_1, (v_2 + v_4), (v_3 + v_5)] : 0.0f), avg))",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2, i_3), orig_value => orig_value, out_indices=(0, i, ((i_1 + i_2) + i_3)), out_tensor=y)",
            ")"
          ]
        },
        {
          "name": "Matmul54",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:102",
                  "type": {
                    "string": "float32[8, 256, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        256,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "AvgPool2d1:0",
                  "type": {
                    "string": "float32[1, 1, 2048]",
                    "shape": {
                      "dimensions": [
                        1,
                        1,
                        2048
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "Matmul54:0",
                  "type": {
                    "string": "float32[8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "algo",
              "type": "str",
              "value": "default",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_rearrange_matmul",
            "  parameters: ",
            "    b: tensor(float32, [8, 256, 1000], global, row_major)",
            "    x: tensor(float32, [1, 1, 2048], global, row_major)",
            "    c: tensor(float32, [8, 1, 1000], global, row_major)",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    a: tensor(float32, [8, 1, 256], global, row_major)",
            "    c: grid([8, 1, 1000], (v, v_1, v_2) => reduce([256], (v_3) => (a[v, v_1, v_3] * b[v, v_3, v_2]), sum))",
            "  prologue:",
            "    a: Prologue((v_4, v_5, v_6) => x[0, 0, (((((0 * 2048) + (0 * 2048)) + ((v_4 % 8) * 256)) + (v_6 % 256)) % 2048)], extra_inputs: [x])",
            ")"
          ]
        },
        {
          "name": "ReduceSum10",
          "type": {
            "name": "ReduceSum",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:103",
                  "type": {
                    "string": "float32[1000]",
                    "shape": {
                      "dimensions": [
                        1000
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "Matmul54:0",
                  "type": {
                    "string": "float32[8, 1, 1000]",
                    "shape": {
                      "dimensions": [
                        8,
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "ReduceSum10:0",
                  "type": {
                    "string": "float32[1, 1000]",
                    "shape": {
                      "dimensions": [
                        1,
                        1000
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "keep_dim",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape_reduce_sum_rearrange_add",
            "  parameters: ",
            "    y: tensor(float32, [1000], global, row_major)",
            "    x: tensor(float32, [8, 1, 1000], global, row_major)",
            "    z: tensor(float32, [1, 1000], global, row_major)",
            "  inputs: [x_1]",
            "  outputs: [y_1]",
            "  computations: ",
            "    x: tensor(float32, [1, 8, 1, 1000], global, row_major)",
            "    y: grid([1, 1, 1000], (v, v_1, v_2) => reduce([8], (v_3) => x_1[v, v_3, v_1, v_2], sum))",
            "  prologue:",
            "    x_1: Prologue((v_4, v_5, v_6, v_7) => x[((((((v_4 * 8000) + (v_5 * 1000)) + (v_6 * 1000)) + v_7) / 1000) % 8), 0, (((((v_4 * 8000) + (v_5 * 1000)) + (v_6 * 1000)) + v_7) % 1000)], extra_inputs: [x])",
            "  epilogue:",
            "    y_1: Epilogue((i, i_1, i_2), orig_value => (orig_value + y[i_2]), out_indices=(i_1, i_2), out_tensor=z)",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}