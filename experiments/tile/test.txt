#layout: block(shape=[32, 64], size_per_thread=[1, 1], thread_per_warp=[1, 32], warps_per_block=[2, 2])                                                                                                                                                                                                                    #layout: block(shape=[64, 32], size_per_thread=[1, 1], thread_per_warp=[1, 32], warps_per_block=[4, 1])
#layout1: block(shape=[64, 32], size_per_thread=[1, 1], thread_per_warp=[1, 32], warps_per_block=[4, 1])                                                                                                                                                                                                                   #layout1: block(shape=[32, 64], size_per_thread=[1, 8], thread_per_warp=[4, 8], warps_per_block=[4, 1])
#layout2: block(shape=[32, 64], size_per_thread=[1, 8], thread_per_warp=[4, 8], warps_per_block=[4, 1])                                                                                                                                                                                                                    #layout2: block(shape=[32], size_per_thread=[1], thread_per_warp=[32], warps_per_block=[4])
#layout3: block(shape=[32], size_per_thread=[1], thread_per_warp=[32], warps_per_block=[4])                                                                                                                                                                                                                                #layout3: block(shape=[32, 64], size_per_thread=[1, 1], thread_per_warp=[1, 32], warps_per_block=[2, 2])
#layout4: block(shape=[32, 32], size_per_thread=[2, 4], thread_per_warp=[4, 8], warps_per_block=[4, 1])                                                                                                                                                                                                                    #layout4: block(shape=[32, 32], size_per_thread=[2, 4], thread_per_warp=[4, 8], warps_per_block=[4, 1])
#layout5: block(shape=[32, 32], size_per_thread=[1, 1], thread_per_warp=[1, 32], warps_per_block=[4, 1])                                                                                                                                                                                                                   #layout5: block(shape=[32, 64], size_per_thread=[4, 4], thread_per_warp=[2, 16], warps_per_block=[4, 1])
#layout6: block(shape=[32, 1], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])                                                                                                                                                                                                                    #layout6: block(shape=[32, 1], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])
#layout7: block(shape=[32, 64], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])                                                                                                                                                                                                                   #layout7: block(shape=[32, 64], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])
#layout8: block(shape=[32, 32], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])                                                                                                                                                                                                                   #layout8: block(shape=[32, 32], size_per_thread=[1, 1], thread_per_warp=[32, 1], warps_per_block=[2, 2])
#layout9: block(shape=[32, 64], size_per_thread=[4, 4], thread_per_warp=[2, 16], warps_per_block=[4, 1])                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                           def flash_attn(
def flash_attn(                                                                                                                                                                                                                                                                                                                q_ptr@6001: float16*,
    q_ptr@6001: float16*,                                                                                                                                                                                                                                                                                                      k_ptr@6002: float16*,
    k_ptr@6002: float16*,                                                                                                                                                                                                                                                                                                      v_ptr@6003: float16*,
    v_ptr@6003: float16*,                                                                                                                                                                                                                                                                                                      y_ptr@6004: float16*
    y_ptr@6004: float16*                                                                                                                                                                                                                                                                                                   )
)                                                                                                                                                                                                                                                                                                                              # kind: cuda_tile
    # kind: cuda_tile                                                                                                                                                                                                                                                                                                          # cuda.block_dim: 128
    # cuda.block_dim: 128                                                                                                                                                                                                                                                                                                      # cuda.grid_dim: 8
    # cuda.grid_dim: 8                                                                                                                                                                                                                                                                                                         let pid_m@6262: int32 = (blockIdx.x@915 % 1)
    let pid_m@6262: int32 = (blockIdx.x@915 % 1)                                                                                                                                                                                                                                                                               let offset_q@6263: int32 = (((blockIdx.x@915 * 32) * 64) + ((pid_m@6262 * 32) * 64))
    let offset_q@6263: int32 = (((blockIdx.x@915 * 32) * 64) + ((pid_m@6262 * 32) * 64))                                                                                                                                                                                                                                       let offset_kv@6264: int32 = ((blockIdx.x@915 * 32) * 64)
    let offset_kv@6264: int32 = ((blockIdx.x@915 * 32) * 64)                                                                                                                                                                                                                                                                   let k_ptrs@6266: float16*[64, 32, #layout] = create((((k_ptr@6002 + (j@6230 * 64)) + i@6229) + offset_kv@6264), shape=[64, 32], axes=[i@6229, j@6230], layout=#layout)
    let q_ptrs@6265: float16*[32, 64, #layout] = create((((q_ptr@6001 + (i@6214 * 64)) + j@6215) + offset_q@6263), shape=[32, 64], axes=[i@6214, j@6215], layout=#layout)                                                                                                                                                      let cvt@6372: float16*[32, 64, #layout1] = create((((q_ptr@6001 + (i_0@6214 * 64)) + j_0@6215) + offset_q@6263), shape=[32, 64], axes=[i_0@6214, j_0@6215], layout=#layout1)
    let k_ptrs@6266: float16*[64, 32, #layout1] = create((((k_ptr@6002 + (j_0@6230 * 64)) + i_0@6229) + offset_kv@6264), shape=[64, 32], axes=[i_0@6229, j_0@6230], layout=#layout1)                                                                                                                                           let load@6373: float16[32, 64, #layout1] = load(cvt@6372)
    let v_ptrs@6267: float16*[32, 64, #layout] = create((((v_ptr@6003 + (i_1@6244 * 64)) + j_1@6245) + offset_kv@6264), shape=[32, 64], axes=[i_1@6244, j_1@6245], layout=#layout)                                                                                                                                             let sums@6270: float32[32, #layout2] = create(0.0f, shape=[32], axes=[i_1@6022], layout=#layout2)
    let cvt@6372: float16*[32, 64, #layout2] = convert_layout(q_ptrs@6265, layout=#layout2)                                                                                                                                                                                                                                    let acc@6271: float32[32, 64, #layout3] = create(0.0f, shape=[32, 64], axes=[i_2@6024, j_1@6025], layout=#layout3)
    let load@6373: float16[32, 64, #layout2] = load(cvt@6372)                                                                                                                                                                                                                                                                  let cvt_0@6321: float16[32, 64, dot_operand(parent=#layout4, id=0)] = convert_layout(load@6373, layout=dot_operand(parent=#layout4, id=0), scope=register)
    let q@6268: float16[32, 64, #layout] = convert_layout(load@6373, layout=#layout)                                                                                                                                                                                                                                           let cvt_1@6446: float32[32, flatten_block(#layout4, axis=1)] = create(-3.4028234663852886e+38f, shape=[32], axes=[i_3@6246], layout=flatten_block(#layout4, axis=1))
    let maxes@6269: float32[32, #layout3] = create(-3.4028234663852886e+38f, shape=[32], axes=[i_2@6246], layout=#layout3)                                                                                                                                                                                                     let cvt_2@6447: float16*[32, 64, #layout1] = create((((v_ptr@6003 + (i_4@6244 * 64)) + j_2@6245) + offset_kv@6264), shape=[32, 64], axes=[i_4@6244, j_2@6245], layout=#layout1)
    let sums@6270: float32[32, #layout3] = create(0.0f, shape=[32], axes=[i_3@6022], layout=#layout3)                                                                                                                                                                                                                          let cvt_3@6969: float32[32, 64, #layout5] = convert_layout(acc@6271, layout=#layout5)
    let acc@6271: float32[32, 64, #layout] = create(0.0f, shape=[32, 64], axes=[i_4@6024, j_2@6025], layout=#layout)                                                                                                                                                                                                           let cvt_4@6970: float32[32, #layout2] = convert_layout(cvt_1@6446, layout=#layout2)
    let cvt_0@6321: float16[32, 64, dot_operand(parent=#layout4, id=0)] = convert_layout(q@6268, layout=dot_operand(parent=#layout4, id=0))                                                                                                                                                                                    for ki@6027 in range(1) with acc_0@6957: float32[32, 64, #layout5] = cvt_3@6969, sums_0@6273: float32[32, #layout2] = sums@6270, maxes@6959: float32[32, #layout2] = cvt_4@6970, k_ptrs_0@6275: float16*[64, 32, #layout] = k_ptrs@6266, v_ptrs@6434: float16*[32, 64, #layout1] = cvt_2@6447:
    let cvt_1@6446: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(maxes@6269, layout=flatten_block(#layout4, axis=1))                                                                                                                                                                                              let k@6277: float16[64, 32, #layout] = load(k_ptrs_0@6275)
    let cvt_2@6447: float16*[32, 64, #layout2] = convert_layout(v_ptrs@6267, layout=#layout2)                                                                                                                                                                                                                                      let cvt_5@6322: float16[64, 32, dot_operand(parent=#layout4, id=1)] = convert_layout(k@6277, layout=dot_operand(parent=#layout4, id=1))
    for ki@6027 in range(1) with acc_0@6272: float32[32, 64, #layout] = acc@6271, sums_0@6273: float32[32, #layout3] = sums@6270, maxes_0@6432: float32[32, flatten_block(#layout4, axis=1)] = cvt_1@6446, k_ptrs_0@6275: float16*[64, 32, #layout1] = k_ptrs@6266, v_ptrs_0@6434: float16*[32, 64, #layout2] = cvt_2@6447:        let cvt_6@6323: float16[32, 32, #layout4] = create(half(0.0), shape=[32, 32], axes=[i_5@6029, j_3@6030], layout=#layout4)
        let k@6277: float16[64, 32, #layout1] = load(k_ptrs_0@6275)                                                                                                                                                                                                                                                                let qk@6279: float16[32, 32, #layout4] = simt_dot(cvt_0@6321, cvt_5@6322, cvt_6@6323)
        let create@6278: float16[32, 32, #layout5] = create(half(0.0), shape=[32, 32], axes=[i_5@6029, j_3@6030], layout=#layout5)                                                                                                                                                                                                 let qk1@6280: float32[32, 32, #layout4] = cast(qk@6279, dtype=float32)
        let cvt_3@6322: float16[64, 32, dot_operand(parent=#layout4, id=1)] = convert_layout(k@6277, layout=dot_operand(parent=#layout4, id=1))                                                                                                                                                                                    let reduce_op@6281: float32[32, flatten_block(#layout4, axis=1)] = reduce_op(qk1@6280, axis=1, keepdims=False, kind=ReduceKind.max, layout=flatten_block(#layout4, axis=1))
        let cvt_4@6323: float16[32, 32, #layout4] = convert_layout(create@6278, layout=#layout4)                                                                                                                                                                                                                                   let cvt_7@6977: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(maxes@6959, layout=flatten_block(#layout4, axis=1))
        let qk@6279: float16[32, 32, #layout4] = simt_dot(cvt_0@6321, cvt_3@6322, cvt_4@6323)                                                                                                                                                                                                                                      let cvt_8@6327: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(cvt_7@6977, layout=flatten_block(#layout4, axis=1), scope=register)
        let qk1@6280: float32[32, 32, #layout4] = cast(qk@6279, dtype=float32)                                                                                                                                                                                                                                                     let cvt_9@6814: float32[32, #layout2] = convert_layout(reduce_op@6281, layout=#layout2)
        let reduce_op@6281: float32[32, flatten_block(#layout4, axis=1)] = reduce_op(qk1@6280, axis=1, keepdims=False, kind=ReduceKind.max, layout=flatten_block(#layout4, axis=1))                                                                                                                                                let cvt_10@6815: float32[32, #layout2] = convert_layout(cvt_8@6327, layout=#layout2)
        let cvt_5@6455: float32[32, #layout3] = convert_layout(maxes_0@6432, layout=#layout3)                                                                                                                                                                                                                                      let cvt_11@6329: float32[32, #layout2] = maximum(cvt_9@6814, cvt_10@6815)
        let cvt_6@6327: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(cvt_5@6455, layout=flatten_block(#layout4, axis=1))                                                                                                                                                                                          let cvt_12@6982: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(maxes@6959, layout=flatten_block(#layout4, axis=1))
        let new_max@6282: float32[32, flatten_block(#layout4, axis=1)] = maximum(reduce_op@6281, cvt_6@6327)                                                                                                                                                                                                                       let cvt_13@6459: float32[32, #layout2] = convert_layout(cvt_12@6982, layout=#layout2)
        let cvt_7@6329: float32[32, #layout3] = convert_layout(new_max@6282, layout=#layout3)                                                                                                                                                                                                                                      let sub@6283: float32[32, #layout2] = sub(cvt_13@6459, cvt_11@6329)
        let cvt_8@6459: float32[32, #layout3] = convert_layout(maxes_0@6432, layout=#layout3)                                                                                                                                                                                                                                      let alpha@6284: float32[32, #layout2] = exp(sub@6283)
        let sub@6283: float32[32, #layout3] = sub(cvt_8@6459, cvt_7@6329)                                                                                                                                                                                                                                                          let cvt_14@6820: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(cvt_13@6459, layout=flatten_block(#layout6, axis=1))
        let alpha@6284: float32[32, #layout3] = exp(sub@6283)                                                                                                                                                                                                                                                                      let cvt_15@6821: float32[32, #layout2] = convert_layout(reduce_op@6281, layout=#layout2)
        let cvt_9@6332: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(alpha@6284, layout=flatten_block(#layout6, axis=1))                                                                                                                                                                                          let cvt_16@6822: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(cvt_15@6821, layout=flatten_block(#layout6, axis=1))
        let expand_dims@6285: float32[32, 1, #layout6] = expand_dims(cvt_9@6332, axis=1, layout=#layout6)                                                                                                                                                                                                                          let cvt_17@6823: float32[32, #layout2] = convert_layout(cvt_8@6327, layout=#layout2)
        let cvt_10@6334: float32[32, 1, #layout7] = convert_layout(expand_dims@6285, layout=#layout7)                                                                                                                                                                                                                              let cvt_18@6824: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(cvt_17@6823, layout=flatten_block(#layout6, axis=1))
        let broadcast@6286: float32[32, 64, #layout7] = broadcast(cvt_10@6334, shape=[32, 64], layout=#layout7)                                                                                                                                                                                                                    let maximum@6825: float32[32, flatten_block(#layout6, axis=1)] = maximum(cvt_16@6822, cvt_18@6824)
        let cvt_11@6336: float32[32, 64, #layout] = convert_layout(broadcast@6286, layout=#layout)                                                                                                                                                                                                                                 let cvt_19@6746: float32[32, flatten_block(#layout6, axis=1)] = sub(cvt_14@6820, maximum@6825)
        let acc_1@6287: float32[32, 64, #layout] = multiply(acc_0@6272, cvt_11@6336)                                                                                                                                                                                                                                               let cvt_20@6332: float32[32, flatten_block(#layout6, axis=1)] = exp(cvt_19@6746)
        let cvt_12@6338: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(new_max@6282, layout=flatten_block(#layout6, axis=1))                                                                                                                                                                                       let expand_dims@6285: float32[32, 1, #layout6] = expand_dims(cvt_20@6332, axis=1, layout=#layout6)
        let expand_dims_0@6288: float32[32, 1, #layout6] = expand_dims(cvt_12@6338, axis=1, layout=#layout6)                                                                                                                                                                                                                       let cvt_21@6334: float32[32, 1, #layout7] = convert_layout(expand_dims@6285, layout=#layout7)
        let cvt_13@6340: float32[32, 1, #layout8] = convert_layout(expand_dims_0@6288, layout=#layout8)                                                                                                                                                                                                                            let broadcast@6286: float32[32, 64, #layout7] = broadcast(cvt_21@6334, shape=[32, 64], layout=#layout7)
        let broadcast_0@6289: float32[32, 32, #layout8] = broadcast(cvt_13@6340, shape=[32, 32], layout=#layout8)                                                                                                                                                                                                                  let cvt_22@6336: float32[32, 64, #layout3] = convert_layout(broadcast@6286, layout=#layout3)
        let cvt_14@6342: float32[32, 32, #layout4] = convert_layout(broadcast_0@6289, layout=#layout4)                                                                                                                                                                                                                             let cvt_23@6833: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(reduce_op@6281, layout=flatten_block(#layout6, axis=1))
        let sub_0@6290: float32[32, 32, #layout4] = sub(qk1@6280, cvt_14@6342)                                                                                                                                                                                                                                                     let cvt_24@6834: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(cvt_8@6327, layout=flatten_block(#layout6, axis=1))
        let p@6291: float32[32, 32, #layout4] = exp(sub_0@6290)                                                                                                                                                                                                                                                                    let cvt_25@6338: float32[32, flatten_block(#layout6, axis=1)] = maximum(cvt_23@6833, cvt_24@6834)
        let multiply@6292: float32[32, #layout3] = multiply(sums_0@6273, alpha@6284)                                                                                                                                                                                                                                               let expand_dims_0@6288: float32[32, 1, #layout6] = expand_dims(cvt_25@6338, axis=1, layout=#layout6)
        let reduce_op_0@6293: float32[32, flatten_block(#layout4, axis=1)] = reduce_op(p@6291, axis=1, keepdims=False, kind=ReduceKind.sum, layout=flatten_block(#layout4, axis=1))                                                                                                                                                let cvt_26@6340: float32[32, 1, #layout8] = convert_layout(expand_dims_0@6288, layout=#layout8)
        let cvt_15@6347: float32[32, #layout3] = convert_layout(reduce_op_0@6293, layout=#layout3)                                                                                                                                                                                                                                 let broadcast_0@6289: float32[32, 32, #layout8] = broadcast(cvt_26@6340, shape=[32, 32], layout=#layout8)
        let sums_1@6294: float32[32, #layout3] = add(multiply@6292, cvt_15@6347)                                                                                                                                                                                                                                                   let cvt_27@6342: float32[32, 32, #layout4] = convert_layout(broadcast_0@6289, layout=#layout4)
        let p1@6295: float16[32, 32, #layout4] = cast(p@6291, dtype=float16)                                                                                                                                                                                                                                                       let sub_0@6290: float32[32, 32, #layout4] = sub(qk1@6280, cvt_27@6342)
        let cvt_16@6480: float16*[32, 64, #layout] = convert_layout(v_ptrs_0@6434, layout=#layout)                                                                                                                                                                                                                                 let p@6291: float32[32, 32, #layout4] = exp(sub_0@6290)
        let cvt_17@6409: float16*[32, 64, #layout2] = convert_layout(cvt_16@6480, layout=#layout2)                                                                                                                                                                                                                                 let multiply@6292: float32[32, #layout2] = multiply(sums_0@6273, alpha@6284)
        let load_0@6410: float16[32, 64, #layout2] = load(cvt_17@6409)                                                                                                                                                                                                                                                             let reduce_op_0@6293: float32[32, flatten_block(#layout4, axis=1)] = reduce_op(p@6291, axis=1, keepdims=False, kind=ReduceKind.sum, layout=flatten_block(#layout4, axis=1))
        let v@6296: float16[32, 64, #layout] = convert_layout(load_0@6410, layout=#layout)                                                                                                                                                                                                                                         let cvt_28@6347: float32[32, #layout2] = convert_layout(reduce_op_0@6293, layout=#layout2)
        let cvt_18@6351: float16[32, 32, dot_operand(parent=#layout9, id=0)] = convert_layout(p1@6295, layout=dot_operand(parent=#layout9, id=0))                                                                                                                                                                                  let sums_1@6294: float32[32, #layout2] = add(multiply@6292, cvt_28@6347)
        let cvt_19@6352: float16[32, 64, dot_operand(parent=#layout9, id=1)] = convert_layout(v@6296, layout=dot_operand(parent=#layout9, id=1))                                                                                                                                                                                   let p1@6295: float16[32, 32, #layout4] = cast(p@6291, dtype=float16)
        let cvt_20@6353: float32[32, 64, #layout9] = convert_layout(acc_1@6287, layout=#layout9)                                                                                                                                                                                                                                   let cvt_29@6409: float16*[32, 64, #layout1] = convert_layout(v_ptrs@6434, layout=#layout1, scope=register)
        let acc_2@6297: float32[32, 64, #layout9] = simt_dot(cvt_18@6351, cvt_19@6352, cvt_20@6353)                                                                                                                                                                                                                                let load_0@6410: float16[32, 64, #layout1] = load(cvt_29@6409)
        let create_0@6298: int32[64, 32, #layout1] = create(2048, shape=[64, 32], axes=[i_6@6062, j_4@6063], layout=#layout1)                                                                                                                                                                                                      let cvt_30@6351: float16[32, 32, dot_operand(parent=#layout5, id=0)] = convert_layout(p1@6295, layout=dot_operand(parent=#layout5, id=0))
        let k_ptrs_1@6299: float16*[64, 32, #layout1] = add(k_ptrs_0@6275, create_0@6298)                                                                                                                                                                                                                                          let cvt_31@6352: float16[32, 64, dot_operand(parent=#layout5, id=1)] = convert_layout(load_0@6410, layout=dot_operand(parent=#layout5, id=1), scope=register)
        let create_1@6300: int32[32, 64, #layout] = create(2048, shape=[32, 64], axes=[i_7@6064, j_5@6065], layout=#layout)                                                                                                                                                                                                        let cvt_32@7016: float32[32, 64, #layout3] = convert_layout(acc_0@6957, layout=#layout3)
        let cvt_21@6491: float16*[32, 64, #layout] = convert_layout(v_ptrs_0@6434, layout=#layout)                                                                                                                                                                                                                                 let cvt_33@6853: float32[32, 64, #layout5] = convert_layout(cvt_32@7016, layout=#layout5)
        let v_ptrs_1@6301: float16*[32, 64, #layout] = add(cvt_21@6491, create_1@6300)                                                                                                                                                                                                                                             let cvt_34@6854: float32[32, 64, #layout5] = convert_layout(cvt_22@6336, layout=#layout5)
        let cvt_22@6359: float32[32, 64, #layout] = convert_layout(acc_2@6297, layout=#layout)                                                                                                                                                                                                                                     let cvt_35@6353: float32[32, 64, #layout5] = multiply(cvt_33@6853, cvt_34@6854)
        let cvt_23@6360: float32[32, #layout3] = convert_layout(new_max@6282, layout=#layout3)                                                                                                                                                                                                                                     let acc_1@6297: float32[32, 64, #layout5] = simt_dot(cvt_30@6351, cvt_31@6352, cvt_35@6353)
        let cvt_24@6495: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(cvt_23@6360, layout=flatten_block(#layout4, axis=1))                                                                                                                                                                                        let create@6298: int32[64, 32, #layout] = create(2048, shape=[64, 32], axes=[i_6@6062, j_4@6063], layout=#layout)
        let cvt_25@6496: float16*[32, 64, #layout2] = convert_layout(v_ptrs_1@6301, layout=#layout2)                                                                                                                                                                                                                               let k_ptrs_1@6299: float16*[64, 32, #layout] = add(k_ptrs_0@6275, create@6298)
        yield cvt_22@6359, sums_1@6294, cvt_24@6495, k_ptrs_1@6299, cvt_25@6496                                                                                                                                                                                                                                                    let create_0@6300: int32[32, 64, #layout3] = create(2048, shape=[32, 64], axes=[i_7@6064, j_5@6065], layout=#layout3)
    get acc_3@6302, sums_2@6303, maxes_1@6433, k_ptrs_2@6305, v_ptrs_2@6435:                                                                                                                                                                                                                                                       let cvt_36@6491: float16*[32, 64, #layout3] = convert_layout(v_ptrs@6434, layout=#layout3)
        let cvt_26@6361: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(sums_2@6303, layout=flatten_block(#layout6, axis=1))                                                                                                                                                                                        let cvt_37@6359: float32[32, 64, #layout3] = convert_layout(acc_1@6297, layout=#layout3)
        let expand_dims_1@6307: float32[32, 1, #layout6] = expand_dims(cvt_26@6361, axis=1, layout=#layout6)                                                                                                                                                                                                                       let cvt_38@6866: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(reduce_op@6281, layout=flatten_block(#layout4, axis=1))
        let cvt_27@6363: float32[32, 1, #layout7] = convert_layout(expand_dims_1@6307, layout=#layout7)                                                                                                                                                                                                                            let cvt_39@6867: float32[32, flatten_block(#layout4, axis=1)] = convert_layout(cvt_8@6327, layout=flatten_block(#layout4, axis=1))
        let broadcast_1@6308: float32[32, 64, #layout7] = broadcast(cvt_27@6363, shape=[32, 64], layout=#layout7)                                                                                                                                                                                                                  let cvt_40@6495: float32[32, flatten_block(#layout4, axis=1)] = maximum(cvt_38@6866, cvt_39@6867)
        let cvt_28@6365: float32[32, 64, #layout] = convert_layout(broadcast_1@6308, layout=#layout)                                                                                                                                                                                                                               let cvt_41@6869: float16*[32, 64, #layout1] = convert_layout(cvt_36@6491, layout=#layout1)
        let acc1@6309: float32[32, 64, #layout] = div(acc_3@6302, cvt_28@6365)                                                                                                                                                                                                                                                     let cvt_42@6870: int32[32, 64, #layout1] = convert_layout(create_0@6300, layout=#layout1)
        let acc2@6310: float16[32, 64, #layout] = cast(acc1@6309, dtype=float16)                                                                                                                                                                                                                                                   let cvt_43@6496: float16*[32, 64, #layout1] = add(cvt_41@6869, cvt_42@6870)
        let y_ptrs@6311: float16*[32, 64, #layout] = create((((y_ptr@6004 + (i_8@6260 * 64)) + j_6@6261) + offset_q@6263), shape=[32, 64], axes=[i_8@6260, j_6@6261], layout=#layout)                                                                                                                                              let cvt_44@7032: float32[32, 64, #layout5] = convert_layout(cvt_37@6359, layout=#layout5)
        let cvt_29@6430: float16*[32, 64, #layout2] = convert_layout(y_ptrs@6311, layout=#layout2)                                                                                                                                                                                                                                 let cvt_45@7033: float32[32, #layout2] = convert_layout(cvt_40@6495, layout=#layout2)
        let cvt_30@6431: float16[32, 64, #layout2] = convert_layout(acc2@6310, layout=#layout2)                                                                                                                                                                                                                                    yield cvt_44@7032, sums_1@6294, cvt_45@7033, k_ptrs_1@6299, cvt_43@6496
        store(cvt_29@6430, cvt_30@6431)                                                                                                                                                                                                                                                                                        get acc_2@6958, sums_2@6303, maxes_0@6960, k_ptrs_2@6305, v_ptrs_0@6435:
                                                                                                                                                                                                                                                                                                                                   let cvt_46@6361: float32[32, flatten_block(#layout6, axis=1)] = convert_layout(sums_2@6303, layout=flatten_block(#layout6, axis=1))
                                                                                                                                                                                                                                                                                                                                   let expand_dims_1@6307: float32[32, 1, #layout6] = expand_dims(cvt_46@6361, axis=1, layout=#layout6)
                                                                                                                                                                                                                                                                                                                                   let cvt_47@6363: float32[32, 1, #layout7] = convert_layout(expand_dims_1@6307, layout=#layout7)
                                                                                                                                                                                                                                                                                                                                   let broadcast_1@6308: float32[32, 64, #layout7] = broadcast(cvt_47@6363, shape=[32, 64], layout=#layout7)
                                                                                                                                                                                                                                                                                                                                   let cvt_48@6365: float32[32, 64, #layout3] = convert_layout(broadcast_1@6308, layout=#layout3)
                                                                                                                                                                                                                                                                                                                                   let cvt_49@7039: float32[32, 64, #layout3] = convert_layout(acc_2@6958, layout=#layout3)
                                                                                                                                                                                                                                                                                                                                   let acc1@6309: float32[32, 64, #layout3] = div(cvt_49@7039, cvt_48@6365)
                                                                                                                                                                                                                                                                                                                                   let acc2@6310: float16[32, 64, #layout3] = cast(acc1@6309, dtype=float16)
                                                                                                                                                                                                                                                                                                                                   let cvt_50@6430: float16*[32, 64, #layout1] = create((((y_ptr@6004 + (i_8@6260 * 64)) + j_6@6261) + offset_q@6263), shape=[32, 64], axes=[i_8@6260, j_6@6261], layout=#layout1)
                                                                                                                                                                                                                                                                                                                                   let cvt_51@6431: float16[32, 64, #layout1] = convert_layout(acc2@6310, layout=#layout1)
                                                                                                                                                                                                                                                                                                                                   store(cvt_50@6430, cvt_51@6431)
                                                                                                                                                                                                                                                                                                                           
