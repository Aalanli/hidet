#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @test_012(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<64x1xi32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %2 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x!tt.ptr<f32>, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.addptr %2, %0 : tensor<32x!tt.ptr<f32>, #triton_gpu.slice<{dim = 0, parent = #blocked}>>, tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %5 = tt.addptr %4, %1 : tensor<64x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %6 = tt.load %3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32xf32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %7 = tt.load %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %8 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xf32, #blocked>
    %9 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<32xf32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xf32, #blocked>
    %10 = tt.broadcast %8 : (tensor<64x1xf32, #blocked>) -> tensor<64x32xf32, #blocked>
    %11 = tt.broadcast %9 : (tensor<1x32xf32, #blocked>) -> tensor<64x32xf32, #blocked>
    %12 = arith.addf %10, %11 : tensor<64x32xf32, #blocked>
    %13 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked>
    %14 = arith.muli %13, %cst : tensor<64x1xi32, #blocked>
    %15 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %16 = tt.broadcast %14 : (tensor<64x1xi32, #blocked>) -> tensor<64x32xi32, #blocked>
    %17 = tt.broadcast %15 : (tensor<1x32xi32, #blocked>) -> tensor<64x32xi32, #blocked>
    %18 = arith.addi %16, %17 : tensor<64x32xi32, #blocked>
    %19 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<64x32x!tt.ptr<f32>, #blocked>
    %20 = tt.addptr %19, %18 : tensor<64x32x!tt.ptr<f32>, #blocked>, tensor<64x32xi32, #blocked>
    tt.store %20, %12 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked>
    tt.return
  }
}
