#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 16, 1], warpsPerCTA = [1, 4, 1], order = [0, 1, 2]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @test1_012(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<1x64x32xi32, #blocked>
    %cst_0 = arith.constant dense<32> : tensor<1x64x32xi32, #blocked>
    %cst_1 = arith.constant dense<32> : tensor<1x64x1xi32, #blocked>
    %cst_2 = arith.constant dense<64> : tensor<1x64x8xi32, #blocked>
    %cst_3 = arith.constant dense<8> : tensor<1x64x8xi32, #blocked>
    %cst_4 = arith.constant dense<8> : tensor<1x64x1xi32, #blocked>
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>) -> tensor<2x1xi32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 2 : i32} : (tensor<2x1xi32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>) -> tensor<2x1x1xi32, #blocked>
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>) -> tensor<1x64xi32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>
    %5 = tt.expand_dims %4 {axis = 2 : i32} : (tensor<1x64xi32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>) -> tensor<1x64x1xi32, #blocked>
    %6 = arith.muli %5, %cst_1 : tensor<1x64x1xi32, #blocked>
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked}>}>>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked}>}>>) -> tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %9 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1x32xi32, #blocked>
    %10 = tt.broadcast %6 : (tensor<1x64x1xi32, #blocked>) -> tensor<1x64x32xi32, #blocked>
    %11 = tt.broadcast %9 : (tensor<1x1x32xi32, #blocked>) -> tensor<1x64x32xi32, #blocked>
    %12 = arith.addi %10, %11 : tensor<1x64x32xi32, #blocked>
    %13 = arith.muli %12, %cst_0 : tensor<1x64x32xi32, #blocked>
    %14 = arith.muli %13, %cst : tensor<1x64x32xi32, #blocked>
    %15 = tt.broadcast %2 : (tensor<2x1x1xi32, #blocked>) -> tensor<2x64x32xi32, #blocked>
    %16 = tt.broadcast %14 : (tensor<1x64x32xi32, #blocked>) -> tensor<2x64x32xi32, #blocked>
    %17 = arith.addi %15, %16 : tensor<2x64x32xi32, #blocked>
    %18 = arith.muli %5, %cst_4 : tensor<1x64x1xi32, #blocked>
    %19 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked}>}>>
    %20 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked}>}>>) -> tensor<1x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<1x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1x8xi32, #blocked>
    %22 = tt.broadcast %18 : (tensor<1x64x1xi32, #blocked>) -> tensor<1x64x8xi32, #blocked>
    %23 = tt.broadcast %21 : (tensor<1x1x8xi32, #blocked>) -> tensor<1x64x8xi32, #blocked>
    %24 = arith.addi %22, %23 : tensor<1x64x8xi32, #blocked>
    %25 = arith.muli %24, %cst_3 : tensor<1x64x8xi32, #blocked>
    %26 = arith.muli %25, %cst_2 : tensor<1x64x8xi32, #blocked>
    %27 = tt.broadcast %2 : (tensor<2x1x1xi32, #blocked>) -> tensor<2x64x8xi32, #blocked>
    %28 = tt.broadcast %26 : (tensor<1x64x8xi32, #blocked>) -> tensor<2x64x8xi32, #blocked>
    %29 = arith.addi %27, %28 : tensor<2x64x8xi32, #blocked>
    %30 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<2x64x32x!tt.ptr<f32>, #blocked>
    %31 = tt.addptr %30, %17 : tensor<2x64x32x!tt.ptr<f32>, #blocked>, tensor<2x64x32xi32, #blocked>
    %32 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<2x64x8x!tt.ptr<f32>, #blocked>
    %33 = tt.addptr %32, %29 : tensor<2x64x8x!tt.ptr<f32>, #blocked>, tensor<2x64x8xi32, #blocked>
    %34 = tt.load %31 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x64x32xf32, #blocked>
    %35 = tt.load %33 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x64x8xf32, #blocked>
    %36 = "tt.reduce"(%34) <{axis = 2 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %44 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %44 : f32
    }) : (tensor<2x64x32xf32, #blocked>) -> tensor<2x64xf32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>
    %37 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %44 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %44 : f32
    }) : (tensor<2x64xf32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>) -> tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>
    %38 = tt.expand_dims %37 {axis = 1 : i32} : (tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked}>}>>) -> tensor<2x1xf32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>
    %39 = tt.expand_dims %38 {axis = 2 : i32} : (tensor<2x1xf32, #triton_gpu.slice<{dim = 2, parent = #blocked}>>) -> tensor<2x1x1xf32, #blocked>
    %40 = tt.broadcast %39 : (tensor<2x1x1xf32, #blocked>) -> tensor<2x64x8xf32, #blocked>
    %41 = arith.mulf %35, %40 : tensor<2x64x8xf32, #blocked>
    %42 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<2x64x8x!tt.ptr<f32>, #blocked>
    %43 = tt.addptr %42, %29 : tensor<2x64x8x!tt.ptr<f32>, #blocked>, tensor<2x64x8xi32, #blocked>
    tt.store %43, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<2x64x8xf32, #blocked>
    tt.return
  }
}
