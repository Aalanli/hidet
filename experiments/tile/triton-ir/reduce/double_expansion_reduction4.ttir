module {
  tt.func public @test1_0d1d2d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<1x64x1xi32>
    %cst_0 = arith.constant dense<512> : tensor<2x1x1xi32>
    %cst_1 = arith.constant dense<32> : tensor<1x64x1xi32>
    %cst_2 = arith.constant dense<2048> : tensor<2x1x1xi32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32>
    %3 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32>
    %4 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<2xi32>) -> tensor<2x1xi32>
    %5 = tt.expand_dims %4 {axis = 2 : i32} : (tensor<2x1xi32>) -> tensor<2x1x1xi32>
    %6 = arith.muli %5, %cst_2 : tensor<2x1x1xi32>
    %7 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %8 = tt.expand_dims %7 {axis = 2 : i32} : (tensor<1x64xi32>) -> tensor<1x64x1xi32>
    %9 = arith.muli %8, %cst_1 : tensor<1x64x1xi32>
    %10 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1x32xi32>) -> tensor<1x1x32xi32>
    %12 = tt.broadcast %9 : (tensor<1x64x1xi32>) -> tensor<1x64x32xi32>
    %13 = tt.broadcast %11 : (tensor<1x1x32xi32>) -> tensor<1x64x32xi32>
    %14 = arith.addi %12, %13 : tensor<1x64x32xi32>
    %15 = tt.broadcast %6 : (tensor<2x1x1xi32>) -> tensor<2x64x32xi32>
    %16 = tt.broadcast %14 : (tensor<1x64x32xi32>) -> tensor<2x64x32xi32>
    %17 = arith.addi %15, %16 : tensor<2x64x32xi32>
    %18 = arith.muli %5, %cst_0 : tensor<2x1x1xi32>
    %19 = arith.muli %8, %cst : tensor<1x64x1xi32>
    %20 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<8xi32>) -> tensor<1x8xi32>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<1x8xi32>) -> tensor<1x1x8xi32>
    %22 = tt.broadcast %19 : (tensor<1x64x1xi32>) -> tensor<1x64x8xi32>
    %23 = tt.broadcast %21 : (tensor<1x1x8xi32>) -> tensor<1x64x8xi32>
    %24 = arith.addi %22, %23 : tensor<1x64x8xi32>
    %25 = tt.broadcast %18 : (tensor<2x1x1xi32>) -> tensor<2x64x8xi32>
    %26 = tt.broadcast %24 : (tensor<1x64x8xi32>) -> tensor<2x64x8xi32>
    %27 = arith.addi %25, %26 : tensor<2x64x8xi32>
    %28 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<2x64x32x!tt.ptr<f32>>
    %29 = tt.addptr %28, %17 : tensor<2x64x32x!tt.ptr<f32>>, tensor<2x64x32xi32>
    %30 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<2x64x8x!tt.ptr<f32>>
    %31 = tt.addptr %30, %27 : tensor<2x64x8x!tt.ptr<f32>>, tensor<2x64x8xi32>
    %32 = tt.load %29 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x64x32xf32>
    %33 = tt.load %31 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x64x8xf32>
    %34 = "tt.reduce"(%32) <{axis = 2 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %42 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<2x64x32xf32>) -> tensor<2x64xf32>
    %35 = "tt.reduce"(%34) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %42 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<2x64xf32>) -> tensor<2xf32>
    %36 = tt.expand_dims %35 {axis = 1 : i32} : (tensor<2xf32>) -> tensor<2x1xf32>
    %37 = tt.expand_dims %36 {axis = 2 : i32} : (tensor<2x1xf32>) -> tensor<2x1x1xf32>
    %38 = tt.broadcast %37 : (tensor<2x1x1xf32>) -> tensor<2x64x8xf32>
    %39 = arith.mulf %33, %38 : tensor<2x64x8xf32>
    %40 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<2x64x8x!tt.ptr<f32>>
    %41 = tt.addptr %40, %27 : tensor<2x64x8x!tt.ptr<f32>>, tensor<2x64x8xi32>
    tt.store %41, %39 {cache = 1 : i32, evict = 1 : i32} : tensor<2x64x8xf32>
    tt.return
  }
}
