#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @test1_01(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<64x1xi32, #blocked>
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked>
    %2 = arith.muli %1, %cst : tensor<64x1xi32, #blocked>
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %5 = tt.broadcast %2 : (tensor<64x1xi32, #blocked>) -> tensor<64x32xi32, #blocked>
    %6 = tt.broadcast %4 : (tensor<1x32xi32, #blocked>) -> tensor<64x32xi32, #blocked>
    %7 = arith.addi %5, %6 : tensor<64x32xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<64x32x!tt.ptr<f32>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<64x32x!tt.ptr<f32>, #blocked>, tensor<64x32xi32, #blocked>
    %10 = tt.load %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf32, #blocked>
    %11 = "tt.reduce"(%10) <{axis = 1 : i32}> ({
    ^bb0(%arg2: f32, %arg3: f32):
      %17 = arith.addf %arg2, %arg3 : f32
      tt.reduce.return %17 : f32
    }) : (tensor<64x32xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xf32, #blocked>
    %13 = tt.broadcast %12 : (tensor<64x1xf32, #blocked>) -> tensor<64x32xf32, #blocked>
    %14 = arith.mulf %10, %13 : tensor<64x32xf32, #blocked>
    %15 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x32x!tt.ptr<f32>, #blocked>
    %16 = tt.addptr %15, %7 : tensor<64x32x!tt.ptr<f32>, #blocked>, tensor<64x32xi32, #blocked>
    tt.store %16, %14 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked>
    tt.return
  }
}
