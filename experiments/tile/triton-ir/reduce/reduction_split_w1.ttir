module {
  tt.func public @test1_012(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<64x1xi32>
    %cst_0 = arith.constant dense<32> : tensor<64x1xi32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %3 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %4 = arith.muli %3, %cst_0 : tensor<64x1xi32>
    %5 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %6 = tt.broadcast %4 : (tensor<64x1xi32>) -> tensor<64x32xi32>
    %7 = tt.broadcast %5 : (tensor<1x32xi32>) -> tensor<64x32xi32>
    %8 = arith.addi %6, %7 : tensor<64x32xi32>
    %9 = arith.muli %3, %cst : tensor<64x1xi32>
    %10 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %11 = tt.broadcast %9 : (tensor<64x1xi32>) -> tensor<64x16xi32>
    %12 = tt.broadcast %10 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %13 = arith.addi %11, %12 : tensor<64x16xi32>
    %14 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<64x32x!tt.ptr<f32>>
    %15 = tt.addptr %14, %8 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32>
    %16 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x16x!tt.ptr<f32>>
    %17 = tt.addptr %16, %13 : tensor<64x16x!tt.ptr<f32>>, tensor<64x16xi32>
    %18 = tt.load %15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf32>
    %19 = tt.load %17 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x16xf32>
    %20 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %26 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %26 : f32
    }) : (tensor<64x32xf32>) -> tensor<64xf32>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
    %22 = tt.broadcast %21 : (tensor<64x1xf32>) -> tensor<64x16xf32>
    %23 = arith.mulf %19, %22 : tensor<64x16xf32>
    %24 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<64x16x!tt.ptr<f32>>
    %25 = tt.addptr %24, %13 : tensor<64x16x!tt.ptr<f32>>, tensor<64x16xi32>
    tt.store %25, %23 {cache = 1 : i32, evict = 1 : i32} : tensor<64x16xf32>
    tt.return
  }
}
