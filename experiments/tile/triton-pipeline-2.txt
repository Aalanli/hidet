#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2]}>
#shared0 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32} {
  func public @test_0123(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>, %arg3: i32) {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>
    %cst_0 = arith.constant dense<64> : tensor<32x1xi32, #blocked0>
    %cst_1 = arith.constant dense<32> : tensor<64x1xi32, #blocked1>
    %cst_2 = arith.constant dense<32> : tensor<64x32xi32, #blocked1>
    %cst_3 = arith.constant dense<32> : tensor<32x64xi32, #blocked0>
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #blocked1>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>) -> tensor<32x1xi32, #blocked0>
    %3 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %4 = arith.muli %2, %cst_0 : tensor<32x1xi32, #blocked0>
    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked0>
    %6 = tt.addptr %5, %4 : tensor<32x1x!tt.ptr<f32>, #blocked0>, tensor<32x1xi32, #blocked0>
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>) -> tensor<1x64xi32, #blocked0>
    %9 = tt.broadcast %6 : (tensor<32x1x!tt.ptr<f32>, #blocked0>) -> tensor<32x64x!tt.ptr<f32>, #blocked0>
    %10 = tt.broadcast %8 : (tensor<1x64xi32, #blocked0>) -> tensor<32x64xi32, #blocked0>
    %11 = tt.addptr %9, %10 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %14 = arith.muli %13, %cst_1 : tensor<64x1xi32, #blocked1>
    %15 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x1x!tt.ptr<f32>, #blocked1>
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1>
    %17 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %18 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %19 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %20 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %21 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f32>, #blocked1>) -> tensor<64x32x!tt.ptr<f32>, #blocked1>
    %22 = tt.broadcast %19 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1>
    %23 = tt.addptr %21, %22 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %24 = arith.index_cast %arg3 : i32 to index
    %c0_i32 = arith.constant 0 : i32
    %25 = arith.cmpi slt, %c0, %24 : index
    %26 = triton_gpu.alloc_tensor : tensor<2x32x64xf32, #shared0>
    %27 = tt.splat %25 : (i1) -> tensor<32x64xi1, #blocked0>
    %28 = triton_gpu.insert_slice_async %11, %26, %c0_i32, %27 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<2x32x64xf32, #shared0>
    triton_gpu.async_commit_group
    %29 = triton_gpu.alloc_tensor : tensor<2x64x32xf32, #shared1>
    %30 = tt.splat %25 : (i1) -> tensor<64x32xi1, #blocked1>
    %31 = triton_gpu.insert_slice_async %23, %29, %c0_i32, %30 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<2x64x32xf32, #shared1>
    triton_gpu.async_commit_group
    %32 = tt.addptr %11, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %33 = tt.addptr %23, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %c1_i32 = arith.constant 1 : i32

    # 1
    %34 = arith.addi %c0_i32, %c1_i32 : i32

    triton_gpu.async_wait {num = 0 : i32}
    %c0_i32_5 = arith.constant 0 : i32
    %35 = tensor.extract_slice %28[0, 0, 0] [1, 32, 64] [1, 1, 1] : tensor<2x32x64xf32, #shared0> to tensor<32x64xf32, #shared0>
    %36 = tensor.extract_slice %31[0, 0, 0] [1, 64, 32] [1, 1, 1] : tensor<2x64x32xf32, #shared1> to tensor<64x32xf32, #shared1>
    %c1_i32_6 = arith.constant 1 : i32

    # 1
    %37 = arith.addi %c0_i32_5, %c1_i32_6 : i32

    # arg
    %38:12 = scf.for %arg4 = %c0 to %24 step %c1 iter_args(%arg5 = %cst, %arg6 = %11, %arg7 = %23, %arg8 = %28, %arg9 = %31, %arg10 = %35, %arg11 = %36, %arg12 = %11, %arg13 = %23, %arg14 = %c0, %arg15 = %34, %arg16 = %37) -> (tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<2x32x64xf32, #shared0>, tensor<2x64x32xf32, #shared1>, tensor<32x64xf32, #shared0>, tensor<64x32xf32, #shared1>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, index, i32, i32) {
      %46 = triton_gpu.convert_layout %arg10 : (tensor<32x64xf32, #shared0>) -> tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>
      %47 = triton_gpu.convert_layout %arg11 : (tensor<64x32xf32, #shared1>) -> tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>
      %48 = tt.dot %46, %47, %arg5 {allowTF32 = true} : tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<32x32xf32, #mma>

      %49 = tt.addptr %arg6, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
      %50 = tt.addptr %arg7, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
      %51 = arith.addi %arg14, %c1 : index
      %52 = arith.cmpi slt, %51, %24 : index
      %c2_i32 = arith.constant 2 : i32
      %53 = arith.remsi %arg15, %c2_i32 : i32
      %c2_i32_7 = arith.constant 2 : i32
      %54 = arith.remsi %arg16, %c2_i32_7 : i32
      %55 = arith.index_cast %54 : i32 to index
      %56 = tt.addptr %arg12, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
      %57 = tt.addptr %arg13, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
      %58 = tt.splat %52 : (i1) -> tensor<32x64xi1, #blocked0>

      # originally 1
      %59 = triton_gpu.insert_slice_async %56, %arg8, %53, %58 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<2x32x64xf32, #shared0>
      triton_gpu.async_commit_group

      %60 = tt.splat %52 : (i1) -> tensor<64x32xi1, #blocked1>

      %61 = triton_gpu.insert_slice_async %57, %arg9, %53, %60 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<2x64x32xf32, #shared1>
      triton_gpu.async_commit_group

      triton_gpu.async_wait {num = 0 : i32}

      # initially 1
      %62 = tensor.extract_slice %59[%55, 0, 0] [1, 32, 64] [1, 1, 1] : tensor<2x32x64xf32, #shared0> to tensor<32x64xf32, #shared0>
      %63 = tensor.extract_slice %61[%55, 0, 0] [1, 64, 32] [1, 1, 1] : tensor<2x64x32xf32, #shared1> to tensor<64x32xf32, #shared1>

      %c1_i32_8 = arith.constant 1 : i32
      %64 = arith.addi %arg15, %c1_i32_8 : i32
      %c1_i32_9 = arith.constant 1 : i32
      %65 = arith.addi %arg16, %c1_i32_9 : i32
      scf.yield %48, %49, %50, %59, %61, %62, %63, %56, %57, %51, %64, %65 : tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<2x32x64xf32, #shared0>, tensor<2x64x32xf32, #shared1>, tensor<32x64xf32, #shared0>, tensor<64x32xf32, #shared1>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, index, i32, i32
    }
    triton_gpu.async_wait {num = 0 : i32}
    %39 = arith.muli %3, %cst_4 : tensor<32x1xi32, #blocked1>
    %40 = tt.broadcast %39 : (tensor<32x1xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %41 = tt.broadcast %20 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %42 = arith.addi %40, %41 : tensor<32x32xi32, #blocked1>
    %43 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %44 = tt.addptr %43, %42 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %45 = triton_gpu.convert_layout %38#0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked1>
    tt.store %44, %45 : tensor<32x32xf32, #blocked1>
    return
  }
}

