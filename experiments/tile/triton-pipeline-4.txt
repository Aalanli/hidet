#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2]}>
#shared0 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32} {
  func public @test_0123(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>, %arg3: i32) {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>
    %cst_0 = arith.constant dense<64> : tensor<32x1xi32, #blocked0>
    %cst_1 = arith.constant dense<32> : tensor<64x1xi32, #blocked1>
    %cst_2 = arith.constant dense<32> : tensor<64x32xi32, #blocked1>
    %cst_3 = arith.constant dense<32> : tensor<32x64xi32, #blocked0>
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #blocked1>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>) -> tensor<32x1xi32, #blocked0>
    %3 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %4 = arith.muli %2, %cst_0 : tensor<32x1xi32, #blocked0>
    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked0>
    %6 = tt.addptr %5, %4 : tensor<32x1x!tt.ptr<f32>, #blocked0>, tensor<32x1xi32, #blocked0>
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>) -> tensor<1x64xi32, #blocked0>
    %9 = tt.broadcast %6 : (tensor<32x1x!tt.ptr<f32>, #blocked0>) -> tensor<32x64x!tt.ptr<f32>, #blocked0>
    %10 = tt.broadcast %8 : (tensor<1x64xi32, #blocked0>) -> tensor<32x64xi32, #blocked0>
    %11 = tt.addptr %9, %10 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %14 = arith.muli %13, %cst_1 : tensor<64x1xi32, #blocked1>
    %15 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x1x!tt.ptr<f32>, #blocked1>
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1>
    %17 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %18 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %19 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %20 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %21 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f32>, #blocked1>) -> tensor<64x32x!tt.ptr<f32>, #blocked1>
    %22 = tt.broadcast %19 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1>
    %23 = tt.addptr %21, %22 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %24 = arith.index_cast %arg3 : i32 to index
    %c0_i32 = arith.constant 0 : i32
    %25 = arith.cmpi slt, %c0, %24 : index
    %26 = triton_gpu.alloc_tensor : tensor<4x32x64xf32, #shared0>
    %27 = tt.splat %25 : (i1) -> tensor<32x64xi1, #blocked0>
    %28 = triton_gpu.insert_slice_async %11, %26, %c0_i32, %27 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<4x32x64xf32, #shared0>
    triton_gpu.async_commit_group
    %29 = triton_gpu.alloc_tensor : tensor<4x64x32xf32, #shared1>
    %30 = tt.splat %25 : (i1) -> tensor<64x32xi1, #blocked1>
    %31 = triton_gpu.insert_slice_async %23, %29, %c0_i32, %30 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<4x64x32xf32, #shared1>
    triton_gpu.async_commit_group
    %32 = tt.addptr %11, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %33 = tt.addptr %23, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %c1_i32 = arith.constant 1 : i32
    %34 = arith.addi %c0_i32, %c1_i32 : i32
    %35 = arith.addi %c0, %c1 : index
    %36 = arith.cmpi slt, %35, %24 : index
    %37 = tt.splat %36 : (i1) -> tensor<32x64xi1, #blocked0>
    %38 = triton_gpu.insert_slice_async %32, %28, %34, %37 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<4x32x64xf32, #shared0>
    triton_gpu.async_commit_group
    %39 = tt.splat %36 : (i1) -> tensor<64x32xi1, #blocked1>
    %40 = triton_gpu.insert_slice_async %33, %31, %34, %39 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<4x64x32xf32, #shared1>
    triton_gpu.async_commit_group
    %41 = tt.addptr %32, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %42 = tt.addptr %33, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %c1_i32_5 = arith.constant 1 : i32
    %43 = arith.addi %34, %c1_i32_5 : i32
    %44 = arith.addi %35, %c1 : index
    %45 = arith.cmpi slt, %44, %24 : index
    %46 = tt.splat %45 : (i1) -> tensor<32x64xi1, #blocked0>
    %47 = triton_gpu.insert_slice_async %41, %38, %43, %46 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<4x32x64xf32, #shared0>
    triton_gpu.async_commit_group
    %48 = tt.splat %45 : (i1) -> tensor<64x32xi1, #blocked1>
    %49 = triton_gpu.insert_slice_async %42, %40, %43, %48 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<4x64x32xf32, #shared1>
    triton_gpu.async_commit_group
    %50 = tt.addptr %41, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %51 = tt.addptr %42, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %c1_i32_6 = arith.constant 1 : i32
    %52 = arith.addi %43, %c1_i32_6 : i32
    triton_gpu.async_wait {num = 4 : i32}
    %c0_i32_7 = arith.constant 0 : i32
    %53 = tensor.extract_slice %47[0, 0, 0] [1, 32, 64] [1, 1, 1] : tensor<4x32x64xf32, #shared0> to tensor<32x64xf32, #shared0>
    %54 = tensor.extract_slice %49[0, 0, 0] [1, 64, 32] [1, 1, 1] : tensor<4x64x32xf32, #shared1> to tensor<64x32xf32, #shared1>
    %c1_i32_8 = arith.constant 1 : i32
    %55 = arith.addi %c0_i32_7, %c1_i32_8 : i32
    %56:12 = scf.for %arg4 = %c0 to %24 step %c1 iter_args(%arg5 = %cst, %arg6 = %11, %arg7 = %23, %arg8 = %47, %arg9 = %49, %arg10 = %53, %arg11 = %54, %arg12 = %41, %arg13 = %42, %arg14 = %44, %arg15 = %52, %arg16 = %55) -> (tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<4x32x64xf32, #shared0>, tensor<4x64x32xf32, #shared1>, tensor<32x64xf32, #shared0>, tensor<64x32xf32, #shared1>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, index, i32, i32) {
      %64 = triton_gpu.convert_layout %arg10 : (tensor<32x64xf32, #shared0>) -> tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>
      %65 = triton_gpu.convert_layout %arg11 : (tensor<64x32xf32, #shared1>) -> tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>
      %66 = tt.dot %64, %65, %arg5 {allowTF32 = true} : tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<32x32xf32, #mma>
      %67 = tt.addptr %arg6, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
      %68 = tt.addptr %arg7, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
      %69 = arith.addi %arg14, %c1 : index
      %70 = arith.cmpi slt, %69, %24 : index
      %c4_i32 = arith.constant 4 : i32
      %71 = arith.remsi %arg15, %c4_i32 : i32
      %c4_i32_9 = arith.constant 4 : i32
      %72 = arith.remsi %arg16, %c4_i32_9 : i32
      %73 = arith.index_cast %72 : i32 to index
      %74 = tt.addptr %arg12, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
      %75 = tt.addptr %arg13, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
      %76 = tt.splat %70 : (i1) -> tensor<32x64xi1, #blocked0>
      %77 = triton_gpu.insert_slice_async %74, %arg8, %71, %76 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64x!tt.ptr<f32>, #blocked0> -> tensor<4x32x64xf32, #shared0>
      triton_gpu.async_commit_group
      %78 = tt.splat %70 : (i1) -> tensor<64x32xi1, #blocked1>
      %79 = triton_gpu.insert_slice_async %75, %arg9, %71, %78 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32x!tt.ptr<f32>, #blocked1> -> tensor<4x64x32xf32, #shared1>
      triton_gpu.async_commit_group
      triton_gpu.async_wait {num = 4 : i32}
      %80 = tensor.extract_slice %77[%73, 0, 0] [1, 32, 64] [1, 1, 1] : tensor<4x32x64xf32, #shared0> to tensor<32x64xf32, #shared0>
      %81 = tensor.extract_slice %79[%73, 0, 0] [1, 64, 32] [1, 1, 1] : tensor<4x64x32xf32, #shared1> to tensor<64x32xf32, #shared1>
      %c1_i32_10 = arith.constant 1 : i32
      %82 = arith.addi %arg15, %c1_i32_10 : i32
      %c1_i32_11 = arith.constant 1 : i32
      %83 = arith.addi %arg16, %c1_i32_11 : i32
      scf.yield %66, %67, %68, %77, %79, %80, %81, %74, %75, %69, %82, %83 : tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<4x32x64xf32, #shared0>, tensor<4x64x32xf32, #shared1>, tensor<32x64xf32, #shared0>, tensor<64x32xf32, #shared1>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>, index, i32, i32
    }
    triton_gpu.async_wait {num = 0 : i32}
    %57 = arith.muli %3, %cst_4 : tensor<32x1xi32, #blocked1>
    %58 = tt.broadcast %57 : (tensor<32x1xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %59 = tt.broadcast %20 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %60 = arith.addi %58, %59 : tensor<32x32xi32, #blocked1>
    %61 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %62 = tt.addptr %61, %60 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %63 = triton_gpu.convert_layout %56#0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked1>
    tt.store %62, %63 : tensor<32x32xf32, #blocked1>
    return
  }
}

