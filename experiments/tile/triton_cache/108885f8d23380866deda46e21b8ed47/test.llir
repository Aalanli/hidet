; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

; Function Attrs: nounwind
define void @test_0d1d2d(float addrspace(1)* %0, float addrspace(1)* %1, float addrspace(1)* %2) local_unnamed_addr #0 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %5 = and i32 %4, 31
  %6 = and i32 %4, 15
  %7 = lshr i32 %5, 2
  %8 = lshr i32 %4, 2
  %9 = and i32 %8, 24
  %10 = or i32 %7, %9
  %11 = shl i32 %4, 2
  %12 = and i32 %11, 12
  %13 = add nuw nsw i32 %10, 8
  %14 = add nuw nsw i32 %10, 16
  %15 = add nuw nsw i32 %10, 24
  %16 = zext i32 %5 to i64
  %17 = getelementptr float, float addrspace(1)* %0, i64 %16
  %18 = zext i32 %6 to i64
  %19 = getelementptr float, float addrspace(1)* %1, i64 %18
  %20 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(float addrspace(1)* %17, i1 true) #0
  %21 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(float addrspace(1)* %19, i1 true) #0
  %22 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %16
  %23 = bitcast float addrspace(3)* %22 to i32 addrspace(3)*
  store i32 %20, i32 addrspace(3)* %23, align 4
  tail call void @llvm.nvvm.barrier0()
  %24 = zext i32 %10 to i64
  %25 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %24
  %26 = load float, float addrspace(3)* %25, align 4
  %27 = zext i32 %13 to i64
  %28 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %27
  %29 = load float, float addrspace(3)* %28, align 4
  %30 = zext i32 %14 to i64
  %31 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %30
  %32 = load float, float addrspace(3)* %31, align 4
  %33 = zext i32 %15 to i64
  %34 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %33
  %35 = load float, float addrspace(3)* %34, align 4
  tail call void @llvm.nvvm.barrier0()
  %36 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %18
  %37 = bitcast float addrspace(3)* %36 to i32 addrspace(3)*
  store i32 %21, i32 addrspace(3)* %37, align 4
  tail call void @llvm.nvvm.barrier0()
  %38 = zext i32 %12 to i64
  %39 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %38
  %40 = load float, float addrspace(3)* %39, align 4
  %41 = or i32 %12, 1
  %42 = zext i32 %41 to i64
  %43 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %42
  %44 = load float, float addrspace(3)* %43, align 4
  %45 = or i32 %12, 2
  %46 = zext i32 %45 to i64
  %47 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %46
  %48 = load float, float addrspace(3)* %47, align 4
  %49 = or i32 %12, 3
  %50 = zext i32 %49 to i64
  %51 = getelementptr float, float addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to float addrspace(3)*), i64 %50
  %52 = load float, float addrspace(3)* %51, align 4
  %53 = fadd float %26, %40
  %54 = fadd float %26, %44
  %55 = fadd float %26, %48
  %56 = fadd float %26, %52
  %57 = fadd float %29, %40
  %58 = fadd float %29, %44
  %59 = fadd float %29, %48
  %60 = fadd float %29, %52
  %61 = fadd float %32, %40
  %62 = fadd float %32, %44
  %63 = fadd float %32, %48
  %64 = fadd float %32, %52
  %65 = fadd float %35, %40
  %66 = fadd float %35, %44
  %67 = fadd float %35, %48
  %68 = fadd float %35, %52
  %69 = shl nuw nsw i32 %10, 4
  %70 = shl nuw nsw i32 %13, 4
  %71 = shl nuw nsw i32 %14, 4
  %72 = shl nuw nsw i32 %15, 4
  %73 = or i32 %69, %12
  %74 = or i32 %70, %12
  %75 = or i32 %71, %12
  %76 = or i32 %72, %12
  %77 = zext i32 %73 to i64
  %78 = getelementptr float, float addrspace(1)* %2, i64 %77
  %79 = zext i32 %74 to i64
  %80 = getelementptr float, float addrspace(1)* %2, i64 %79
  %81 = zext i32 %75 to i64
  %82 = getelementptr float, float addrspace(1)* %2, i64 %81
  %83 = zext i32 %76 to i64
  %84 = getelementptr float, float addrspace(1)* %2, i64 %83
  %85 = bitcast float %53 to i32
  %86 = bitcast float %54 to i32
  %87 = bitcast float %55 to i32
  %88 = bitcast float %56 to i32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %85, i32 %86, i32 %87, i32 %88, float addrspace(1)* %78, i1 true) #0
  %89 = bitcast float %57 to i32
  %90 = bitcast float %58 to i32
  %91 = bitcast float %59 to i32
  %92 = bitcast float %60 to i32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %89, i32 %90, i32 %91, i32 %92, float addrspace(1)* %80, i1 true) #0
  %93 = bitcast float %61 to i32
  %94 = bitcast float %62 to i32
  %95 = bitcast float %63 to i32
  %96 = bitcast float %64 to i32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %93, i32 %94, i32 %95, i32 %96, float addrspace(1)* %82, i1 true) #0
  %97 = bitcast float %65 to i32
  %98 = bitcast float %66 to i32
  %99 = bitcast float %67 to i32
  %100 = bitcast float %68 to i32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %98, i32 %99, i32 %100, float addrspace(1)* %84, i1 true) #0
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { convergent nounwind }

!nvvm.annotations = !{!0, !1, !0}

!0 = !{void (float addrspace(1)*, float addrspace(1)*, float addrspace(1)*)* @test_0d1d2d, !"kernel", i32 1}
!1 = !{void (float addrspace(1)*, float addrspace(1)*, float addrspace(1)*)* @test_0d1d2d, !"maxntidx", i32 32}
