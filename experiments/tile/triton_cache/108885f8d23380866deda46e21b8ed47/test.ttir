module {
  func public @test_0d1d2d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<16> : tensor<32x1xi32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %2 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x!tt.ptr<f32>>
    %3 = tt.addptr %2, %0 : tensor<32x!tt.ptr<f32>>, tensor<32xi32>
    %4 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<16x!tt.ptr<f32>>
    %5 = tt.addptr %4, %1 : tensor<16x!tt.ptr<f32>>, tensor<16xi32>
    %6 = tt.load %3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32xf32>
    %7 = tt.load %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16xf32>
    %8 = tt.expand_dims %6 {axis = 1 : i32} : (tensor<32xf32>) -> tensor<32x1xf32>
    %9 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<16xf32>) -> tensor<1x16xf32>
    %10 = tt.broadcast %8 : (tensor<32x1xf32>) -> tensor<32x16xf32>
    %11 = tt.broadcast %9 : (tensor<1x16xf32>) -> tensor<32x16xf32>
    %12 = arith.addf %10, %11 : tensor<32x16xf32>
    %13 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %14 = arith.muli %13, %cst : tensor<32x1xi32>
    %15 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %16 = tt.broadcast %14 : (tensor<32x1xi32>) -> tensor<32x16xi32>
    %17 = tt.broadcast %15 : (tensor<1x16xi32>) -> tensor<32x16xi32>
    %18 = arith.addi %16, %17 : tensor<32x16xi32>
    %19 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x16x!tt.ptr<f32>>
    %20 = tt.addptr %19, %18 : tensor<32x16x!tt.ptr<f32>>, tensor<32x16xi32>
    tt.store %20, %12 : tensor<32x16xf32>
    return
  }
}
