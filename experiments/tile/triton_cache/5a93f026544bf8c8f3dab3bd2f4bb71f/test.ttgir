#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2]}>
module attributes {"triton_gpu.num-warps" = 4 : i32} {
  func public @test_0123(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>, %arg3: i32) {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>
    %cst_0 = arith.constant dense<64> : tensor<32x1xi32, #blocked0>
    %cst_1 = arith.constant dense<32> : tensor<64x1xi32, #blocked1>
    %cst_2 = arith.constant dense<32> : tensor<64x32xi32, #blocked1>
    %cst_3 = arith.constant dense<32> : tensor<32x64xi32, #blocked0>
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #blocked1>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>) -> tensor<32x1xi32, #blocked0>
    %3 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %4 = arith.muli %2, %cst_0 : tensor<32x1xi32, #blocked0>
    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked0>
    %6 = tt.addptr %5, %4 : tensor<32x1x!tt.ptr<f32>, #blocked0>, tensor<32x1xi32, #blocked0>
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>) -> tensor<1x64xi32, #blocked0>
    %9 = tt.broadcast %6 : (tensor<32x1x!tt.ptr<f32>, #blocked0>) -> tensor<32x64x!tt.ptr<f32>, #blocked0>
    %10 = tt.broadcast %8 : (tensor<1x64xi32, #blocked0>) -> tensor<32x64xi32, #blocked0>
    %11 = tt.addptr %9, %10 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %14 = arith.muli %13, %cst_1 : tensor<64x1xi32, #blocked1>
    %15 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x1x!tt.ptr<f32>, #blocked1>
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1>
    %17 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %18 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %19 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %20 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %21 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f32>, #blocked1>) -> tensor<64x32x!tt.ptr<f32>, #blocked1>
    %22 = tt.broadcast %19 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1>
    %23 = tt.addptr %21, %22 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
    %24 = arith.index_cast %arg3 : i32 to index
    %25:3 = scf.for %arg4 = %c0 to %24 step %c1 iter_args(%arg5 = %cst, %arg6 = %11, %arg7 = %23) -> (tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>) {
      %33 = tt.load %arg6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64xf32, #blocked0>
      %34 = tt.load %arg7 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf32, #blocked1>
      %35 = triton_gpu.convert_layout %33 : (tensor<32x64xf32, #blocked0>) -> tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>
      %36 = triton_gpu.convert_layout %34 : (tensor<64x32xf32, #blocked1>) -> tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>
      %37 = tt.dot %35, %36, %arg5 {allowTF32 = true} : tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<32x32xf32, #mma>
      %38 = tt.addptr %arg6, %cst_3 : tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<32x64xi32, #blocked0>
      %39 = tt.addptr %arg7, %cst_2 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi32, #blocked1>
      scf.yield %37, %38, %39 : tensor<32x32xf32, #mma>, tensor<32x64x!tt.ptr<f32>, #blocked0>, tensor<64x32x!tt.ptr<f32>, #blocked1>
    }
    %26 = arith.muli %3, %cst_4 : tensor<32x1xi32, #blocked1>
    %27 = tt.broadcast %26 : (tensor<32x1xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %28 = tt.broadcast %20 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %29 = arith.addi %27, %28 : tensor<32x32xi32, #blocked1>
    %30 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %31 = tt.addptr %30, %29 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %32 = triton_gpu.convert_layout %25#0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked1>
    tt.store %31, %32 : tensor<32x32xf32, #blocked1>
    return
  }
}
