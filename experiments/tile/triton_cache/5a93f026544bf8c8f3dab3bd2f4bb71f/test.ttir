module {
  func public @test_0123(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: !tt.ptr<f32>, %arg3: i32) {
    %cst = arith.constant dense<32> : tensor<32x1xi32>
    %cst_0 = arith.constant dense<32> : tensor<64x32xi32>
    %cst_1 = arith.constant dense<32> : tensor<32x64xi32>
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst_2 = arith.constant dense<32> : tensor<64x1xi32>
    %cst_3 = arith.constant dense<64> : tensor<32x1xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %3 = arith.muli %2, %cst_3 : tensor<32x1xi32>
    %4 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %6 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %7 = tt.broadcast %5 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x64x!tt.ptr<f32>>
    %8 = tt.broadcast %6 : (tensor<1x64xi32>) -> tensor<32x64xi32>
    %9 = tt.addptr %7, %8 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32>
    %10 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %11 = arith.muli %10, %cst_2 : tensor<64x1xi32>
    %12 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x1x!tt.ptr<f32>>
    %13 = tt.addptr %12, %11 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32>
    %14 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %15 = tt.broadcast %13 : (tensor<64x1x!tt.ptr<f32>>) -> tensor<64x32x!tt.ptr<f32>>
    %16 = tt.broadcast %14 : (tensor<1x32xi32>) -> tensor<64x32xi32>
    %17 = tt.addptr %15, %16 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32>
    %18 = arith.index_cast %arg3 : i32 to index
    %19:3 = scf.for %arg4 = %c0 to %18 step %c1 iter_args(%arg5 = %cst_4, %arg6 = %9, %arg7 = %17) -> (tensor<32x32xf32>, tensor<32x64x!tt.ptr<f32>>, tensor<64x32x!tt.ptr<f32>>) {
      %26 = tt.load %arg6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64xf32>
      %27 = tt.load %arg7 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf32>
      %28 = tt.dot %26, %27, %arg5 {allowTF32 = true} : tensor<32x64xf32> * tensor<64x32xf32> -> tensor<32x32xf32>
      %29 = tt.addptr %arg6, %cst_1 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32>
      %30 = tt.addptr %arg7, %cst_0 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32>
      scf.yield %28, %29, %30 : tensor<32x32xf32>, tensor<32x64x!tt.ptr<f32>>, tensor<64x32x!tt.ptr<f32>>
    }
    %20 = arith.muli %2, %cst : tensor<32x1xi32>
    %21 = tt.broadcast %20 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %22 = tt.broadcast %14 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %23 = arith.addi %21, %22 : tensor<32x32xi32>
    %24 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x32x!tt.ptr<f32>>
    %25 = tt.addptr %24, %23 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    tt.store %25, %19#0 : tensor<32x32xf32>
    return
  }
}
